# generated by datamodel-codegen:
#   filename:  common.json
#   timestamp: 2020-10-15T10:44:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional, Union

from pydantic import AnyUrl, BaseModel, constr


class common(BaseModel):
    __root__: Any


class Name(BaseModel):
    __root__: constr(
        regex='^((\d|[a-zA-Z]|_)+(:(\d|[a-zA-Z]|_)+)?(#\d+)?)$', min_length=1
    )


class PropertyNames(BaseModel):
    __root__: constr(
        regex='^((\d|[a-zA-Z]|_)+(:(\d|[a-zA-Z]|_)+)?(#\d+)?)$|^(@context)$'
    )


class ObservedAt(BaseModel):
    __root__: datetime


class CreatedAt(BaseModel):
    __root__: datetime


class ModifiedAt(BaseModel):
    __root__: datetime


class LdContextItem(BaseModel):
    pass


class LdContext(BaseModel):
    __root__: Union[Dict[str, Any], LdContextItem, LdContextItem]


class Accept(Enum):
    application_json = 'application/json'
    application_ld_json = 'application/ld+json'


class Endpoint(BaseModel):
    uri: AnyUrl
    accept: Optional[Accept] = None


class EntityInfo(BaseModel):
    id: Optional[AnyUrl] = None
    type: Name
    idPattern: Optional[str] = None


class ProblemDetails(BaseModel):
    type: AnyUrl
    title: Optional[str] = None
    detail: Optional[str] = None


class GeorelItem(BaseModel):
    pass


class Georel(BaseModel):
    __root__: Union[GeorelItem, GeorelItem]


class Coordinates(BaseModel):
    __root__: Any


class Geometry(Enum):
    Point = 'Point'
    MultiPoint = 'MultiPoint'
    LineString = 'LineString'
    MultiLineString = 'MultiLineString'
    Polygon = 'Polygon'
    MultiPolygon = 'MultiPolygon'


class Timerel(Enum):
    before = 'before'
    after = 'after'
    between = 'between'
