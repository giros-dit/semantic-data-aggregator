"""
    ETSI ISG CIM / NGSI-LD API

    This OAS file describes the NGSI-LD API defined by the ETSI ISG CIM group. This Cross-domain Context Information Management API allows to provide, consume and subscribe to context information in multiple scenarios and involving multiple stakeholders  # noqa: E501

    The version of the OpenAPI document: latest
    Contact: NGSI-LD@etsi.org
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.coordinates import Coordinates
from openapi_client.model.entity_temporal import EntityTemporal
from openapi_client.model.entity_temporal_fragment import EntityTemporalFragment
from openapi_client.model.entity_temporal_list import EntityTemporalList
from openapi_client.model.geometry import Geometry
from openapi_client.model.georel import Georel
from openapi_client.model.name import Name
from openapi_client.model.problem_details import ProblemDetails
from openapi_client.model.timerel import Timerel


class TemporalApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_temporal_entity_attrs_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}/attrs/',
                'operation_id': 'add_temporal_entity_attrs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'entity_temporal_fragment',
                ],
                'required': [
                    'entity_id',
                    'entity_temporal_fragment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'entity_temporal_fragment':
                        (EntityTemporalFragment,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                },
                'location_map': {
                    'entity_id': 'path',
                    'entity_temporal_fragment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [
                    'application/json;application/ld+json'
                ]
            },
            api_client=api_client
        )
        self.create_update_entity_temporal_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/',
                'operation_id': 'create_update_entity_temporal',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_temporal',
                ],
                'required': [
                    'entity_temporal',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_temporal':
                        (EntityTemporal,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'entity_temporal': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [
                    'application/json;application/ld+json'
                ]
            },
            api_client=api_client
        )
        self.modify_entity_temporal_attr_instance_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}',
                'operation_id': 'modify_entity_temporal_attr_instance',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'attr_id',
                    'instance_id',
                    'entity_temporal_fragment',
                ],
                'required': [
                    'entity_id',
                    'attr_id',
                    'instance_id',
                    'entity_temporal_fragment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'attr_id':
                        (Name,),
                    'instance_id':
                        (str,),
                    'entity_temporal_fragment':
                        (EntityTemporalFragment,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'attr_id': 'attrId',
                    'instance_id': 'instanceId',
                },
                'location_map': {
                    'entity_id': 'path',
                    'attr_id': 'path',
                    'instance_id': 'path',
                    'entity_temporal_fragment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [
                    'application/json;application/ld+json'
                ]
            },
            api_client=api_client
        )
        self.query_temporal_entities_endpoint = _Endpoint(
            settings={
                'response_type': (EntityTemporalList,),
                'auth': [],
                'endpoint_path': '/temporal/entities/',
                'operation_id': 'query_temporal_entities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'id_pattern',
                    'type',
                    'attrs',
                    'q',
                    'georel',
                    'geometry',
                    'coordinates',
                    'geoproperty',
                    'timerel',
                    'timeproperty',
                    'time',
                    'end_time',
                    'csf',
                    'limit',
                    'options',
                    'last_n',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                    'type',
                    'attrs',
                    'q',
                    'geoproperty',
                    'csf',
                    'limit',
                    'last_n',
                ]
            },
            root_map={
                'validations': {
                    ('type',): {

                        'min_length': 1,
                    },
                    ('attrs',): {

                        'min_length': 1,
                    },
                    ('q',): {

                        'min_length': 1,
                    },
                    ('geoproperty',): {

                        'min_length': 1,
                    },
                    ('csf',): {

                        'min_length': 1,
                    },
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                    ('last_n',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('options',): {

                        "TEMPORALVALUES": "temporalValues",
                        "SYSATTRS": "sysAttrs"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'id_pattern':
                        (str,),
                    'type':
                        (str,),
                    'attrs':
                        (str,),
                    'q':
                        (str,),
                    'georel':
                        (Georel,),
                    'geometry':
                        (Geometry,),
                    'coordinates':
                        (Coordinates,),
                    'geoproperty':
                        (str,),
                    'timerel':
                        (Timerel,),
                    'timeproperty':
                        (Name,),
                    'time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'csf':
                        (str,),
                    'limit':
                        (int,),
                    'options':
                        (str,),
                    'last_n':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                    'id_pattern': 'idPattern',
                    'type': 'type',
                    'attrs': 'attrs',
                    'q': 'q',
                    'georel': 'georel',
                    'geometry': 'geometry',
                    'coordinates': 'coordinates',
                    'geoproperty': 'geoproperty',
                    'timerel': 'timerel',
                    'timeproperty': 'timeproperty',
                    'time': 'time',
                    'end_time': 'endTime',
                    'csf': 'csf',
                    'limit': 'limit',
                    'options': 'options',
                    'last_n': 'lastN',
                },
                'location_map': {
                    'id': 'query',
                    'id_pattern': 'query',
                    'type': 'query',
                    'attrs': 'query',
                    'q': 'query',
                    'georel': 'query',
                    'geometry': 'query',
                    'coordinates': 'query',
                    'geoproperty': 'query',
                    'timerel': 'query',
                    'timeproperty': 'query',
                    'time': 'query',
                    'end_time': 'query',
                    'csf': 'query',
                    'limit': 'query',
                    'options': 'query',
                    'last_n': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_entity_temporal_attr_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}/attrs/{attrId}',
                'operation_id': 'remove_entity_temporal_attr',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'attr_id',
                ],
                'required': [
                    'entity_id',
                    'attr_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'attr_id':
                        (Name,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'attr_id': 'attrId',
                },
                'location_map': {
                    'entity_id': 'path',
                    'attr_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_entity_temporal_attr_instance_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}/attrs/{attrId}/{instanceId}',
                'operation_id': 'remove_entity_temporal_attr_instance',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'attr_id',
                    'instance_id',
                ],
                'required': [
                    'entity_id',
                    'attr_id',
                    'instance_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'attr_id':
                        (Name,),
                    'instance_id':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'attr_id': 'attrId',
                    'instance_id': 'instanceId',
                },
                'location_map': {
                    'entity_id': 'path',
                    'attr_id': 'path',
                    'instance_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_entity_temporal_by_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}',
                'operation_id': 'remove_entity_temporal_by_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'type',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'type':
                        (Name,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'type': 'type',
                },
                'location_map': {
                    'entity_id': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.retrieve_entity_temporal_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (EntityTemporal,),
                'auth': [],
                'endpoint_path': '/temporal/entities/{entityId}',
                'operation_id': 'retrieve_entity_temporal_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'attrs',
                    'type',
                    'options',
                    'timerel',
                    'timeproperty',
                    'time',
                    'end_time',
                    'last_n',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                    'attrs',
                    'last_n',
                ]
            },
            root_map={
                'validations': {
                    ('attrs',): {

                        'min_length': 1,
                    },
                    ('last_n',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('options',): {

                        "TEMPORALVALUES": "temporalValues",
                        "SYSATTRS": "sysAttrs"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'attrs':
                        (str,),
                    'type':
                        (Name,),
                    'options':
                        (str,),
                    'timerel':
                        (Timerel,),
                    'timeproperty':
                        (Name,),
                    'time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'last_n':
                        (int,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'attrs': 'attrs',
                    'type': 'type',
                    'options': 'options',
                    'timerel': 'timerel',
                    'timeproperty': 'timeproperty',
                    'time': 'time',
                    'end_time': 'endTime',
                    'last_n': 'lastN',
                },
                'location_map': {
                    'entity_id': 'path',
                    'attrs': 'query',
                    'type': 'query',
                    'options': 'query',
                    'timerel': 'query',
                    'timeproperty': 'query',
                    'time': 'query',
                    'end_time': 'query',
                    'last_n': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;application/ld+json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def add_temporal_entity_attrs(
        self,
        entity_id,
        entity_temporal_fragment,
        **kwargs
    ):
        """add_temporal_entity_attrs  # noqa: E501

        Add new attributes to an existing Temporal Entity within an NGSI-LD system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_temporal_entity_attrs(entity_id, entity_temporal_fragment, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id
            entity_temporal_fragment (EntityTemporalFragment):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        kwargs['entity_temporal_fragment'] = \
            entity_temporal_fragment
        return self.add_temporal_entity_attrs_endpoint.call_with_http_info(**kwargs)

    def create_update_entity_temporal(
        self,
        entity_temporal,
        **kwargs
    ):
        """create_update_entity_temporal  # noqa: E501

        Create or update temporal representation of an Entity within an NGSI-LD system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_update_entity_temporal(entity_temporal, async_req=True)
        >>> result = thread.get()

        Args:
            entity_temporal (EntityTemporal):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_temporal'] = \
            entity_temporal
        return self.create_update_entity_temporal_endpoint.call_with_http_info(**kwargs)

    def modify_entity_temporal_attr_instance(
        self,
        entity_id,
        attr_id,
        instance_id,
        entity_temporal_fragment,
        **kwargs
    ):
        """modify_entity_temporal_attr_instance  # noqa: E501

        Allows modifying a specific Attribute (Property or Relationship) instance, identified by its instanceId, of a Temporal Representation of an Entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_entity_temporal_attr_instance(entity_id, attr_id, instance_id, entity_temporal_fragment, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id
            attr_id (Name): Attribute Id
            instance_id (str): Instance Id
            entity_temporal_fragment (EntityTemporalFragment):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        kwargs['attr_id'] = \
            attr_id
        kwargs['instance_id'] = \
            instance_id
        kwargs['entity_temporal_fragment'] = \
            entity_temporal_fragment
        return self.modify_entity_temporal_attr_instance_endpoint.call_with_http_info(**kwargs)

    def query_temporal_entities(
        self,
        **kwargs
    ):
        """query_temporal_entities  # noqa: E501

        Query temporal evolution of Entities from an NGSI-LD system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.query_temporal_entities(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            id (str): Comma separated list of URIs to be retrieved. [optional]
            id_pattern (str): Regular expression that must be matched by Entity ids. [optional]
            type (str): Comma separated list of Entity type names to be retrieved. [optional]
            attrs (str): Comma separated list of attribute names (properties or relationships) to be retrieved. [optional]
            q (str): Query. [optional]
            georel (Georel): Geo-relationship. [optional]
            geometry (Geometry): Geometry. [optional]
            coordinates (Coordinates): Coordinates serialized as a string. [optional]
            geoproperty (str): The name of the property that contains the geo-spatial data that will be used to resolve the geoquery. [optional]
            timerel (Timerel): Time relationship. [optional]
            timeproperty (Name): The name of the property that contains the temporal data that will be used to resolve the temporal query. [optional]
            time (datetime): start time for temporal query. [optional]
            end_time (datetime): end time for temporal query. [optional]
            csf (str): Context Source Filter. [optional]
            limit (int): Pagination limit. [optional]
            options (str): Options dictionary. [optional]
            last_n (int): Only retrieve last N instances. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EntityTemporalList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.query_temporal_entities_endpoint.call_with_http_info(**kwargs)

    def remove_entity_temporal_attr(
        self,
        entity_id,
        attr_id,
        **kwargs
    ):
        """remove_entity_temporal_attr  # noqa: E501

        Attribute from Temporal Representation of Entity deletion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_entity_temporal_attr(entity_id, attr_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id
            attr_id (Name): Attribute Id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        kwargs['attr_id'] = \
            attr_id
        return self.remove_entity_temporal_attr_endpoint.call_with_http_info(**kwargs)

    def remove_entity_temporal_attr_instance(
        self,
        entity_id,
        attr_id,
        instance_id,
        **kwargs
    ):
        """remove_entity_temporal_attr_instance  # noqa: E501

        Attribute Instance deletion by instance id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_entity_temporal_attr_instance(entity_id, attr_id, instance_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id
            attr_id (Name): Attribute Id
            instance_id (str): Instance Id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        kwargs['attr_id'] = \
            attr_id
        kwargs['instance_id'] = \
            instance_id
        return self.remove_entity_temporal_attr_instance_endpoint.call_with_http_info(**kwargs)

    def remove_entity_temporal_by_id(
        self,
        entity_id,
        **kwargs
    ):
        """remove_entity_temporal_by_id  # noqa: E501

        Removes the temporal representation of an Entity from an NGSI-LD system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_entity_temporal_by_id(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id

        Keyword Args:
            type (Name): Entity Type. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        return self.remove_entity_temporal_by_id_endpoint.call_with_http_info(**kwargs)

    def retrieve_entity_temporal_by_id(
        self,
        entity_id,
        **kwargs
    ):
        """retrieve_entity_temporal_by_id  # noqa: E501

        Retrieve the temporal representation of an specific Entity from an NGSI-LD system. It's possible to specify the Entity attributes to be retrieved by using query parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_entity_temporal_by_id(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity Id

        Keyword Args:
            attrs (str): Comma separated list of attribute names (properties or relationships) to be retrieved. [optional]
            type (Name): Entity Type. [optional]
            options (str): Options dictionary. [optional]
            timerel (Timerel): Time relationship. [optional]
            timeproperty (Name): The name of the property that contains the temporal data that will be used to resolve the temporal query. [optional]
            time (datetime): start time for temporal query. [optional]
            end_time (datetime): end time for temporal query. [optional]
            last_n (int): Only retrieve last N instances. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            EntityTemporal
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['entity_id'] = \
            entity_id
        return self.retrieve_entity_temporal_by_id_endpoint.call_with_http_info(**kwargs)

