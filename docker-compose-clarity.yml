version: '3.9'
services:
  app-manager:
    build:
      context: .
      dockerfile: ./docker/app-manager/Dockerfile
    hostname: app-manager
    container_name: app-manager
    environment:
      - FLINK_MANAGER_URI=${FLINK_MANAGER_URI}
      - NIFI_URI=${NIFI_URI}
      - NIFI_USERNAME=${NIFI_USERNAME}
      - NIFI_PASSWORD=${NIFI_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./docker/app-manager/app_manager:/opt/sda/app-manager/app_manager
    depends_on:
      - flink-jobmanager
      - nifi
      - redis
  context-catalog:
    image: halverneus/static-file-server
    hostname: context-catalog
    container_name: context-catalog
    ports:
      - "8080"
    volumes:
      - ./docker/context-catalog:/web
  data-lake-explorer:
    build:
      context: .
      dockerfile: ./docker/data-lake-explorer/Dockerfile
    hostname: data-lake-explorer
    container_name: data-lake-explorer
    environment:
      - BROKER_URI=${BROKER_URI}
      - CONTEXT_CATALOG_URI=${CONTEXT_CATALOG_URI}
      - DATA_LAKE_EXPLORER_URI=${DATA_LAKE_EXPLORER_URI}
      - DATA_LAKE_EXPLORER_SUBSCRIPTION_ID=${DATA_LAKE_EXPLORER_SUBSCRIPTION_ID}
    ports:
      - "8080"
    volumes:
      - ./docker/data-lake-explorer/data_lake_explorer:/opt/sda/data-lake-explorer/data_lake_explorer
    depends_on:
      - scorpio
  eureka:
    image: scorpiobroker/scorpio:eureka-server_2.1.13
    hostname: eureka
    container_name: eureka
    ports:
      - "8761"
  flink-jobmanager:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-jobmanager
    container_name: flink-jobmanager
    ports:
      - "8084:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    volumes:
      - ./flink-conf:/flink-conf
  flink-taskmanager-1:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-taskmanager-1
    container_name: flink-taskmanager-1
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 1
  flink-taskmanager-2:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-taskmanager-2
    container_name: flink-taskmanager-2
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 1
  flink-taskmanager-3:
    image: flink:1.14.4-scala_2.12-java11
    hostname: flink-taskmanager-3
    container_name: flink-taskmanager-3
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 1
  gateway:
    image: scorpiobroker/scorpio:gateway_aaio_2.1.13
    hostname: gateway
    container_name: gateway
    ports:
      - "9090:9090"
    depends_on:
      - eureka
  kafka:
    image: bitnami/kafka
    hostname: kafka
    container_name: kafka
    ports:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_LOG_RETENTION_MS: 10000
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    logging:
      driver: none
  nifi:
    build:
      context: .
      dockerfile: ./docker/nifi/Dockerfile
    hostname: nifi
    container_name: nifi
    user: root
    environment:
      SINGLE_USER_CREDENTIALS_USERNAME: ${NIFI_USERNAME}
      # Must be of 12 characters min
      SINGLE_USER_CREDENTIALS_PASSWORD: ${NIFI_PASSWORD}
      NIFI_JVM_HEAP_INIT: 4g
      NIFI_JVM_HEAP_MAX: 6g
    ports:
      - "8443:8443"
      # Used by Prometheus exporter
      - "8444:8444"
    volumes:
      - gnmic-subscriptions:/gnmic-cfgs
      - ./docker/nifi/drivers/jinja-templates:/jinja-templates
      - ./docker/nifi/drivers/nars:/opt/nifi/nifi-current/extensions
      - ./docker/nifi/drivers/yang-models:/opt/nifi/yang-models
  postgres:
    image: postgis/postgis
    hostname: postgres
    container_name: postgres
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ngb
      POSTGRES_PASSWORD: ngb
      POSTGRES_DB: ngb
    logging:
      driver: none
  r1:
    image: "ceos-image:4.27.3F"
    hostname: r1
    container_name: r1
    ports:
      - "6030" # gNMI
      - "830" # NETCONF
    command: /sbin/init  systemd.setenv=INTFTYPE=eth systemd.setenv=ETBA=1 systemd.setenv=SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT=1 systemd.setenv=CEOS=1 systemd.setenv=EOS_PLATFORM=ceoslab systemd.setenv=container=docker systemd.setenv=MAPETH0=1 systemd.setenv=MGMT_INTF=eth0
    privileged: true
    environment:
      INTFTYPE: eth
      ETBA: 1
      SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT: 1
      CEOS: 1
      EOS_PLATFORM: ceoslab
      container: docker
      MAPETH0: 1
      MGMT_INTF: eth0
    networks:
      default:
        ipv4_address: 172.16.238.11
      r1r2:
        ipv4_address: 10.0.0.11
      vm1r1:
        ipv4_address: 10.0.10.11
    volumes:
      - ./docker/ceos-arista/r1/startup-config.cfg:/mnt/flash/startup-config
  r2:
    image: "ceos-image:4.27.3F"
    hostname: r2
    container_name: r2
    ports:
      - "6030" # gNMI
      - "830" # NETCONF
    command: /sbin/init  systemd.setenv=INTFTYPE=eth systemd.setenv=ETBA=1 systemd.setenv=SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT=1 systemd.setenv=CEOS=1 systemd.setenv=EOS_PLATFORM=ceoslab systemd.setenv=container=docker systemd.setenv=MAPETH0=1 systemd.setenv=MGMT_INTF=eth0
    privileged: true
    environment:
      INTFTYPE: eth
      ETBA: 1
      SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT: 1
      CEOS: 1
      EOS_PLATFORM: ceoslab
      container: docker
      MAPETH0: 1
      MGMT_INTF: eth0
    networks:
      default:
        ipv4_address: 172.16.238.12
      r1r2:
        ipv4_address: 10.0.0.12
      vm2r2:
        ipv4_address: 10.0.20.12
    volumes:
      - ./docker/ceos-arista/r2/startup-config.cfg:/mnt/flash/startup-config
  redis:
    image: bitnami/redis:latest
    hostname: redis
    container_name: redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379"
  scorpio:
    image: scorpiobroker/scorpio:scorpio-aaio_2.1.13
    hostname: scorpio
    container_name: scorpio
    ports:
      - "27015"
    depends_on:
      - gateway
      - eureka
      - postgres
      - kafka
  telemetry-explorer:
    build:
      context: .
      dockerfile: ./docker/telemetry-explorer/Dockerfile
    hostname: telemetry-explorer
    container_name: telemetry-explorer
    environment:
      - BROKER_URI=${BROKER_URI}
      - CONTEXT_CATALOG_URI=${CONTEXT_CATALOG_URI}
      - TELEMETRY_EXPLORER_URI=${TELEMETRY_EXPLORER_URI}
      - TELEMETRY_EXPLORER_SUBSCRIPTION_ID=${TELEMETRY_EXPLORER_SUBSCRIPTION_ID}
    ports:
      - "8080"
    volumes:
      - ./docker/telemetry-explorer/telemetry_explorer:/opt/sda/telemetry-explorer/telemetry_explorer
    depends_on:
      - scorpio
  weaver:
    build:
      context: .
      dockerfile: ./docker/weaver/Dockerfile
    hostname: weaver
    container_name: weaver
    environment:
      - BROKER_URI=${BROKER_URI}
      - CONTEXT_CATALOG_URI=${CONTEXT_CATALOG_URI}
      - FLINK_MANAGER_URI=${FLINK_MANAGER_URI}
      - NIFI_URI=${NIFI_URI}
      - NIFI_USERNAME=${NIFI_USERNAME}
      - NIFI_PASSWORD=${NIFI_PASSWORD}
      - WEAVER_URI=${WEAVER_URI}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "8080"
    volumes:
      - ./docker/weaver/weaver:/opt/sda/weaver/weaver
      - gnmic-subscriptions:/gnmic-cfgs
    depends_on:
      - nifi
      - scorpio
  vm1:
    image: praqma/network-multitool
    hostname: vm1
    container_name: vm1
    networks:
      vm1r1:
        ipv4_address: 10.0.10.100
    cap_add:
      - NET_ADMIN
    command: >-
      sh -c "ip route del default && ip route add default via 10.0.10.11 && tail -f /dev/null"
  vm2:
    image: praqma/network-multitool
    hostname: vm2
    container_name: vm2
    networks:
      vm2r2:
        ipv4_address: 10.0.20.100
    cap_add:
      - NET_ADMIN
    command: >-
      sh -c "ip route del default && ip route add default via 10.0.20.12 && tail -f /dev/null"
  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181"
    logging:
      driver: none

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
          gateway: 172.16.238.1
  r1r2:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/24
  vm1r1:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.10.0/24
  vm2r2:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.20.0/24


volumes:
  gnmic-subscriptions:
