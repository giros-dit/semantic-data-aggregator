/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package giros.org;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Metric extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6375647597886522641L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Metric\",\"namespace\":\"giros.org\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"logicalType\":\"local-timestamp-millis\"},\"doc\":\"/metric/timestamp\"},{\"name\":\"value\",\"type\":{\"type\":\"double\",\"logicalType\":\"decimal\",\"precision\":\"3\"},\"doc\":\"/metric/value\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"/metric/name\"},{\"name\":\"labels\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Labels\",\"fields\":[{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Label\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"/metric/labels/label/name\"},{\"name\":\"value\",\"type\":\"string\",\"doc\":\"/metric/labels/label/value\"}],\"aliases\":[\"labelType\"]}}],\"doc\":\"/metric/labels/label\"}],\"aliases\":[\"labelsType\"]}],\"doc\":\"/metric/labels\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Metric> ENCODER =
      new BinaryMessageEncoder<Metric>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Metric> DECODER =
      new BinaryMessageDecoder<Metric>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Metric> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Metric> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Metric> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Metric>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Metric to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Metric from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Metric instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Metric fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** /metric/timestamp */
   private java.lang.CharSequence timestamp;
  /** /metric/value */
   private double value;
  /** /metric/name */
   private java.lang.CharSequence name;
  /** /metric/labels */
   private giros.org.Labels labels;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Metric() {}

  /**
   * All-args constructor.
   * @param timestamp /metric/timestamp
   * @param value /metric/value
   * @param name /metric/name
   * @param labels /metric/labels
   */
  public Metric(java.lang.CharSequence timestamp, java.lang.Double value, java.lang.CharSequence name, giros.org.Labels labels) {
    this.timestamp = timestamp;
    this.value = value;
    this.name = name;
    this.labels = labels;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return value;
    case 2: return name;
    case 3: return labels;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.CharSequence)value$; break;
    case 1: value = (java.lang.Double)value$; break;
    case 2: name = (java.lang.CharSequence)value$; break;
    case 3: labels = (giros.org.Labels)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return /metric/timestamp
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * /metric/timestamp
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return /metric/value
   */
  public double getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * /metric/value
   * @param value the value to set.
   */
  public void setValue(double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return /metric/name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * /metric/name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'labels' field.
   * @return /metric/labels
   */
  public giros.org.Labels getLabels() {
    return labels;
  }


  /**
   * Sets the value of the 'labels' field.
   * /metric/labels
   * @param value the value to set.
   */
  public void setLabels(giros.org.Labels value) {
    this.labels = value;
  }

  /**
   * Creates a new Metric RecordBuilder.
   * @return A new Metric RecordBuilder
   */
  public static giros.org.Metric.Builder newBuilder() {
    return new giros.org.Metric.Builder();
  }

  /**
   * Creates a new Metric RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Metric RecordBuilder
   */
  public static giros.org.Metric.Builder newBuilder(giros.org.Metric.Builder other) {
    if (other == null) {
      return new giros.org.Metric.Builder();
    } else {
      return new giros.org.Metric.Builder(other);
    }
  }

  /**
   * Creates a new Metric RecordBuilder by copying an existing Metric instance.
   * @param other The existing instance to copy.
   * @return A new Metric RecordBuilder
   */
  public static giros.org.Metric.Builder newBuilder(giros.org.Metric other) {
    if (other == null) {
      return new giros.org.Metric.Builder();
    } else {
      return new giros.org.Metric.Builder(other);
    }
  }

  /**
   * RecordBuilder for Metric instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metric>
    implements org.apache.avro.data.RecordBuilder<Metric> {

    /** /metric/timestamp */
    private java.lang.CharSequence timestamp;
    /** /metric/value */
    private double value;
    /** /metric/name */
    private java.lang.CharSequence name;
    /** /metric/labels */
    private giros.org.Labels labels;
    private giros.org.Labels.Builder labelsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(giros.org.Metric.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.labels)) {
        this.labels = data().deepCopy(fields()[3].schema(), other.labels);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLabelsBuilder()) {
        this.labelsBuilder = giros.org.Labels.newBuilder(other.getLabelsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Metric instance
     * @param other The existing instance to copy.
     */
    private Builder(giros.org.Metric other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.labels)) {
        this.labels = data().deepCopy(fields()[3].schema(), other.labels);
        fieldSetFlags()[3] = true;
      }
      this.labelsBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * /metric/timestamp
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * /metric/timestamp
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public giros.org.Metric.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * /metric/timestamp
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * /metric/timestamp
      * @return This builder.
      */
    public giros.org.Metric.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * /metric/value
      * @return The value.
      */
    public double getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * /metric/value
      * @param value The value of 'value'.
      * @return This builder.
      */
    public giros.org.Metric.Builder setValue(double value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * /metric/value
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * /metric/value
      * @return This builder.
      */
    public giros.org.Metric.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * /metric/name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * /metric/name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public giros.org.Metric.Builder setName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * /metric/name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * /metric/name
      * @return This builder.
      */
    public giros.org.Metric.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'labels' field.
      * /metric/labels
      * @return The value.
      */
    public giros.org.Labels getLabels() {
      return labels;
    }


    /**
      * Sets the value of the 'labels' field.
      * /metric/labels
      * @param value The value of 'labels'.
      * @return This builder.
      */
    public giros.org.Metric.Builder setLabels(giros.org.Labels value) {
      validate(fields()[3], value);
      this.labelsBuilder = null;
      this.labels = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'labels' field has been set.
      * /metric/labels
      * @return True if the 'labels' field has been set, false otherwise.
      */
    public boolean hasLabels() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'labels' field and creates one if it doesn't exist yet.
     * /metric/labels
     * @return This builder.
     */
    public giros.org.Labels.Builder getLabelsBuilder() {
      if (labelsBuilder == null) {
        if (hasLabels()) {
          setLabelsBuilder(giros.org.Labels.newBuilder(labels));
        } else {
          setLabelsBuilder(giros.org.Labels.newBuilder());
        }
      }
      return labelsBuilder;
    }

    /**
     * Sets the Builder instance for the 'labels' field
     * /metric/labels
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public giros.org.Metric.Builder setLabelsBuilder(giros.org.Labels.Builder value) {
      clearLabels();
      labelsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'labels' field has an active Builder instance
     * /metric/labels
     * @return True if the 'labels' field has an active Builder instance
     */
    public boolean hasLabelsBuilder() {
      return labelsBuilder != null;
    }

    /**
      * Clears the value of the 'labels' field.
      * /metric/labels
      * @return This builder.
      */
    public giros.org.Metric.Builder clearLabels() {
      labels = null;
      labelsBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Metric build() {
      try {
        Metric record = new Metric();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Double) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (labelsBuilder != null) {
          try {
            record.labels = this.labelsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("labels"));
            throw e;
          }
        } else {
          record.labels = fieldSetFlags()[3] ? this.labels : (giros.org.Labels) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Metric>
    WRITER$ = (org.apache.avro.io.DatumWriter<Metric>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Metric>
    READER$ = (org.apache.avro.io.DatumReader<Metric>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.timestamp);

    out.writeDouble(this.value);

    out.writeString(this.name);

    if (this.labels == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.labels.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);

      this.value = in.readDouble();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.labels = null;
      } else {
        if (this.labels == null) {
          this.labels = new giros.org.Labels();
        }
        this.labels.customDecode(in);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          break;

        case 1:
          this.value = in.readDouble();
          break;

        case 2:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.labels = null;
          } else {
            if (this.labels == null) {
              this.labels = new giros.org.Labels();
            }
            this.labels.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










