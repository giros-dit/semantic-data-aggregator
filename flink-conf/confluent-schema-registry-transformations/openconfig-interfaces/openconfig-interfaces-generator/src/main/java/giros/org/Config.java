/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package giros.org;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Config extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4041951343494288940L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Config\",\"namespace\":\"giros.org\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"/interfaces/interface/config/name\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"/interfaces/interface/config/type\"},{\"name\":\"mtu\",\"type\":[\"null\",\"int\"],\"doc\":\"/interfaces/interface/config/mtu\"},{\"name\":\"loopback_mode\",\"type\":[\"null\",\"boolean\"],\"doc\":\"/interfaces/interface/config/loopback-mode\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"/interfaces/interface/config/description\"},{\"name\":\"enabled\",\"type\":[\"null\",\"boolean\"],\"doc\":\"/interfaces/interface/config/enabled\"}],\"aliases\":[\"configType\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Config> ENCODER =
      new BinaryMessageEncoder<Config>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Config> DECODER =
      new BinaryMessageDecoder<Config>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Config> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Config> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Config> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Config>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Config to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Config from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Config instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Config fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** /interfaces/interface/config/name */
   private java.lang.CharSequence name;
  /** /interfaces/interface/config/type */
   private java.lang.CharSequence type;
  /** /interfaces/interface/config/mtu */
   private java.lang.Integer mtu;
  /** /interfaces/interface/config/loopback-mode */
   private java.lang.Boolean loopback_mode;
  /** /interfaces/interface/config/description */
   private java.lang.CharSequence description;
  /** /interfaces/interface/config/enabled */
   private java.lang.Boolean enabled;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Config() {}

  /**
   * All-args constructor.
   * @param name /interfaces/interface/config/name
   * @param type /interfaces/interface/config/type
   * @param mtu /interfaces/interface/config/mtu
   * @param loopback_mode /interfaces/interface/config/loopback-mode
   * @param description /interfaces/interface/config/description
   * @param enabled /interfaces/interface/config/enabled
   */
  public Config(java.lang.CharSequence name, java.lang.CharSequence type, java.lang.Integer mtu, java.lang.Boolean loopback_mode, java.lang.CharSequence description, java.lang.Boolean enabled) {
    this.name = name;
    this.type = type;
    this.mtu = mtu;
    this.loopback_mode = loopback_mode;
    this.description = description;
    this.enabled = enabled;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return mtu;
    case 3: return loopback_mode;
    case 4: return description;
    case 5: return enabled;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: mtu = (java.lang.Integer)value$; break;
    case 3: loopback_mode = (java.lang.Boolean)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: enabled = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return /interfaces/interface/config/name
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * /interfaces/interface/config/name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return /interfaces/interface/config/type
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * /interfaces/interface/config/type
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'mtu' field.
   * @return /interfaces/interface/config/mtu
   */
  public java.lang.Integer getMtu() {
    return mtu;
  }


  /**
   * Sets the value of the 'mtu' field.
   * /interfaces/interface/config/mtu
   * @param value the value to set.
   */
  public void setMtu(java.lang.Integer value) {
    this.mtu = value;
  }

  /**
   * Gets the value of the 'loopback_mode' field.
   * @return /interfaces/interface/config/loopback-mode
   */
  public java.lang.Boolean getLoopbackMode() {
    return loopback_mode;
  }


  /**
   * Sets the value of the 'loopback_mode' field.
   * /interfaces/interface/config/loopback-mode
   * @param value the value to set.
   */
  public void setLoopbackMode(java.lang.Boolean value) {
    this.loopback_mode = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return /interfaces/interface/config/description
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * /interfaces/interface/config/description
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'enabled' field.
   * @return /interfaces/interface/config/enabled
   */
  public java.lang.Boolean getEnabled() {
    return enabled;
  }


  /**
   * Sets the value of the 'enabled' field.
   * /interfaces/interface/config/enabled
   * @param value the value to set.
   */
  public void setEnabled(java.lang.Boolean value) {
    this.enabled = value;
  }

  /**
   * Creates a new Config RecordBuilder.
   * @return A new Config RecordBuilder
   */
  public static giros.org.Config.Builder newBuilder() {
    return new giros.org.Config.Builder();
  }

  /**
   * Creates a new Config RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Config RecordBuilder
   */
  public static giros.org.Config.Builder newBuilder(giros.org.Config.Builder other) {
    if (other == null) {
      return new giros.org.Config.Builder();
    } else {
      return new giros.org.Config.Builder(other);
    }
  }

  /**
   * Creates a new Config RecordBuilder by copying an existing Config instance.
   * @param other The existing instance to copy.
   * @return A new Config RecordBuilder
   */
  public static giros.org.Config.Builder newBuilder(giros.org.Config other) {
    if (other == null) {
      return new giros.org.Config.Builder();
    } else {
      return new giros.org.Config.Builder(other);
    }
  }

  /**
   * RecordBuilder for Config instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Config>
    implements org.apache.avro.data.RecordBuilder<Config> {

    /** /interfaces/interface/config/name */
    private java.lang.CharSequence name;
    /** /interfaces/interface/config/type */
    private java.lang.CharSequence type;
    /** /interfaces/interface/config/mtu */
    private java.lang.Integer mtu;
    /** /interfaces/interface/config/loopback-mode */
    private java.lang.Boolean loopback_mode;
    /** /interfaces/interface/config/description */
    private java.lang.CharSequence description;
    /** /interfaces/interface/config/enabled */
    private java.lang.Boolean enabled;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(giros.org.Config.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.mtu)) {
        this.mtu = data().deepCopy(fields()[2].schema(), other.mtu);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.loopback_mode)) {
        this.loopback_mode = data().deepCopy(fields()[3].schema(), other.loopback_mode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.enabled)) {
        this.enabled = data().deepCopy(fields()[5].schema(), other.enabled);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Config instance
     * @param other The existing instance to copy.
     */
    private Builder(giros.org.Config other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mtu)) {
        this.mtu = data().deepCopy(fields()[2].schema(), other.mtu);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.loopback_mode)) {
        this.loopback_mode = data().deepCopy(fields()[3].schema(), other.loopback_mode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.enabled)) {
        this.enabled = data().deepCopy(fields()[5].schema(), other.enabled);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * /interfaces/interface/config/name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * /interfaces/interface/config/name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public giros.org.Config.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * /interfaces/interface/config/name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * /interfaces/interface/config/name
      * @return This builder.
      */
    public giros.org.Config.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * /interfaces/interface/config/type
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * /interfaces/interface/config/type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public giros.org.Config.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * /interfaces/interface/config/type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * /interfaces/interface/config/type
      * @return This builder.
      */
    public giros.org.Config.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mtu' field.
      * /interfaces/interface/config/mtu
      * @return The value.
      */
    public java.lang.Integer getMtu() {
      return mtu;
    }


    /**
      * Sets the value of the 'mtu' field.
      * /interfaces/interface/config/mtu
      * @param value The value of 'mtu'.
      * @return This builder.
      */
    public giros.org.Config.Builder setMtu(java.lang.Integer value) {
      validate(fields()[2], value);
      this.mtu = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mtu' field has been set.
      * /interfaces/interface/config/mtu
      * @return True if the 'mtu' field has been set, false otherwise.
      */
    public boolean hasMtu() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mtu' field.
      * /interfaces/interface/config/mtu
      * @return This builder.
      */
    public giros.org.Config.Builder clearMtu() {
      mtu = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'loopback_mode' field.
      * /interfaces/interface/config/loopback-mode
      * @return The value.
      */
    public java.lang.Boolean getLoopbackMode() {
      return loopback_mode;
    }


    /**
      * Sets the value of the 'loopback_mode' field.
      * /interfaces/interface/config/loopback-mode
      * @param value The value of 'loopback_mode'.
      * @return This builder.
      */
    public giros.org.Config.Builder setLoopbackMode(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.loopback_mode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'loopback_mode' field has been set.
      * /interfaces/interface/config/loopback-mode
      * @return True if the 'loopback_mode' field has been set, false otherwise.
      */
    public boolean hasLoopbackMode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'loopback_mode' field.
      * /interfaces/interface/config/loopback-mode
      * @return This builder.
      */
    public giros.org.Config.Builder clearLoopbackMode() {
      loopback_mode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * /interfaces/interface/config/description
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * /interfaces/interface/config/description
      * @param value The value of 'description'.
      * @return This builder.
      */
    public giros.org.Config.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * /interfaces/interface/config/description
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * /interfaces/interface/config/description
      * @return This builder.
      */
    public giros.org.Config.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'enabled' field.
      * /interfaces/interface/config/enabled
      * @return The value.
      */
    public java.lang.Boolean getEnabled() {
      return enabled;
    }


    /**
      * Sets the value of the 'enabled' field.
      * /interfaces/interface/config/enabled
      * @param value The value of 'enabled'.
      * @return This builder.
      */
    public giros.org.Config.Builder setEnabled(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.enabled = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'enabled' field has been set.
      * /interfaces/interface/config/enabled
      * @return True if the 'enabled' field has been set, false otherwise.
      */
    public boolean hasEnabled() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'enabled' field.
      * /interfaces/interface/config/enabled
      * @return This builder.
      */
    public giros.org.Config.Builder clearEnabled() {
      enabled = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Config build() {
      try {
        Config record = new Config();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.mtu = fieldSetFlags()[2] ? this.mtu : (java.lang.Integer) defaultValue(fields()[2]);
        record.loopback_mode = fieldSetFlags()[3] ? this.loopback_mode : (java.lang.Boolean) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.enabled = fieldSetFlags()[5] ? this.enabled : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Config>
    WRITER$ = (org.apache.avro.io.DatumWriter<Config>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Config>
    READER$ = (org.apache.avro.io.DatumReader<Config>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.mtu == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.mtu);
    }

    if (this.loopback_mode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.loopback_mode);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    if (this.enabled == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.enabled);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mtu = null;
      } else {
        this.mtu = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.loopback_mode = null;
      } else {
        this.loopback_mode = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.enabled = null;
      } else {
        this.enabled = in.readBoolean();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mtu = null;
          } else {
            this.mtu = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.loopback_mode = null;
          } else {
            this.loopback_mode = in.readBoolean();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString(this.description instanceof Utf8 ? (Utf8)this.description : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.enabled = null;
          } else {
            this.enabled = in.readBoolean();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










