# generated by datamodel-codegen:
#   filename:  pipelines/clarity/gnmi.json

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import BaseModel, Extra, Field, StrictBool, StrictInt, StrictStr

from ...entity import Property, Relationship
from ..task import Task


class EncodingOptions(Enum):
    json = 'JSON'
    bytes = 'BYTES'
    proto = 'PROTO'
    ascii = 'ASCII'
    json_ietf = 'JSON_IETF'


class ModeOptions(Enum):
    stream = 'STREAM'
    once = 'ONCE'
    poll = 'POLL'


class ModelData(BaseModel):
    """
    ModelData is used to describe a set of schema modules. It can be used in a CapabilityResponse where a target reports the set of modules that it supports, and within the SubscribeRequest and GetRequest messages to specify the set of models from which data tree elements should be reported. Reference: gNMI Specification Section 3.2.3.
    """

    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    name: Optional[StrictStr] = Field(None, description='Name of the model.')
    organization: Optional[StrictStr] = Field(
        None, description='Organization publishing the model.'
    )
    version: Optional[StrictStr] = Field(
        None, description='Semantic version of the model.'
    )


class StreamModeOptions(Enum):
    sample = 'SAMPLE'
    target_defined = 'TARGET_DEFINED'
    on_change = 'ON_CHANGE'


class AllowAggregation(Property):
    """
    Property. Whether elements of the schema that are marked as eligible for aggregation.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictBool


class Encoding(Property):
    """
    Property. The encoding that the target should use within the Notifications generated.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: EncodingOptions


class HasInput(Relationship):
    """
    Relationship. Target Device entity for the gNMI subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    object: StrictStr


class HeartbeatInterval(Property):
    """
    Property. A heartbeat interval MAY be specified along with an 'on change' subscription - in this case, the value of the data item(s) MUST be re-sent once per heartbeat interval regardless of whether the value has changed or not. A heartbeat_interval MAY be specified to modify the behavior of suppress_redundant in a sampled subscription. In this case, the target MUST generate one telemetry update per heartbeat interval, regardless of whether the suppress_redundant flag is set to true. This value is specified as an integer in milliseconds.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictInt


class Mode(Property):
    """
    Property. Specifies mode of the subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: Optional[ModeOptions] = 'STREAM'


class Paths(Property):
    """
    Property. List of subscription paths for the named subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: Union[List[StrictStr], StrictStr]


class Prefix(Property):
    """
    Property. Path to be set as the Subscribe Request Prefix.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictStr


class Qos(Property):
    """
    Property. Specifies the DSCP marking that is to be used for the subscribe responses. This value is specified as an integer in milliseconds.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictInt


class SampleInterval(Property):
    """
    Property. Specifies the sample interval for a STREAM/SAMPLE subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictInt
    unit_code: Optional[Literal['C26']] = Field('C26', alias='unitCode')


class StreamMode(Property):
    """
    Property. If `mode` is set to STREAM, this defines the type of streamed subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: Optional[StreamModeOptions] = 'TARGET_DEFINED'


class SuppressRedundant(Property):
    """
    Property. If set to true, the target SHOULD NOT generate a telemetry update message unless the value of the path being reported on has changed since the last.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictBool


class UpdatesOnly(Property):
    """
    Property. If set to true, the target MUST not transmit the current state of the paths that the client has subscribed to, but rather should send only updates to them.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictBool


class UseModels(Property):
    """
    Property. Schema definition modules.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: Union[List[ModelData], ModelData]


class GnmiCollector(Task):
    """
    Entity that represents a dynamic gNMI subscription.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    type: Optional[Literal['GnmiCollector']] = Field(
        'GnmiCollector',
        description='NGSI-LD Entity identifier. It has to be GnmiCollector',
    )
    allow_aggregation: Optional[AllowAggregation] = Field(
        None, alias='allowAggregation'
    )
    encoding: Optional[Encoding]
    has_input: HasInput = Field(..., alias='hasInput')
    heartbeat_interval: Optional[HeartbeatInterval] = Field(
        None, alias='heartbeatInterval'
    )
    mode: Mode
    paths: Paths
    prefix: Optional[Prefix]
    qos: Optional[Qos]
    sample_interval: Optional[SampleInterval] = Field(
        None, alias='sampleInterval'
    )
    stream_mode: Optional[StreamMode] = Field(None, alias='streamMode')
    suppress_redundant: Optional[SuppressRedundant] = Field(
        None, alias='suppressRedundant'
    )
    updates_only: Optional[UpdatesOnly] = Field(None, alias='updatesOnly')
    use_models: Optional[UseModels] = Field(None, alias='useModels')
