# generated by datamodel-codegen:
#   filename:  pipelines/clarity/datalake.json

from __future__ import annotations

from typing import Literal, Optional

from pydantic import Extra, Field, StrictStr

from ...entity import Property, Relationship
from ..task import Task


class Bucket(Property):
    """
    Property. Name of the Data Lake's S3 bucket where to store the data.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictStr


class HasInput(Relationship):
    """
    Relationship. InterfaceKPIAggregator entity that provides input data to be stored in the Data Lake.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    object: StrictStr


class HasOutput(Relationship):
    """
    Relationship. DataLake entity where to store the data.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    object: StrictStr


class InstanceFileName(Property):
    """
    Property. String to be appended to the name of each object that will be created within the bucket. This property maps to the name of the instance data file as described in RFC9195, Section 2.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictStr


class DataLakeDispatcher(Task):
    """
    Entity that represents a task that writes data in 5G-CLARITY's Data Lake platform.
    """

    class Config:
        validate_assignment = True
        extra = Extra.forbid
        allow_population_by_field_name = True

    type: Optional[Literal['DataLakeDispatcher']] = Field(
        'DataLakeDispatcher',
        description='NGSI-LD Entity identifier. It has to be DataLakeDispatcher',
    )
    bucket: Bucket
    has_input: HasInput = Field(..., alias='hasInput')
    has_output: HasOutput = Field(..., alias='hasOutput')
    instance_file_name: InstanceFileName = Field(..., alias='instanceFileName')
