# generated by datamodel-codegen:
#   filename:  common.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, StrictStr

from . import geometry


class NgsiLdCommonDefinitions(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Any = Field(
        ..., description='NGSI-LD Common', title='NGSI-LD Common Definitions'
    )


class Name(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    __root__: StrictStr = Field(..., description='NGSI-LD Name')


class PropertyNames(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: StrictStr


class ObservedAt(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: datetime


class CreatedAt(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: datetime


class ModifiedAt(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: datetime


class LdContextItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: List[Any] = Field(..., min_items=1)


class LdContext(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[Dict[str, Any], AnyUrl, LdContextItem]


class Accept(Enum):
    application_json = 'application/json'
    application_ld_json = 'application/ld+json'


class Endpoint(BaseModel):
    class Config:
        allow_population_by_field_name = True

    uri: AnyUrl
    accept: Optional[Accept]


class EntityInfo(BaseModel):
    class Config:
        allow_population_by_field_name = True

    id: Optional[StrictStr]
    type: Name
    id_pattern: Optional[StrictStr] = Field(None, alias='idPattern')


class ProblemDetails(BaseModel):
    class Config:
        allow_population_by_field_name = True

    type: AnyUrl
    title: Optional[StrictStr]
    detail: Optional[StrictStr]


class GeorelEnum(Enum):
    equals = 'equals'
    disjoint = 'disjoint'
    intersects = 'intersects'
    within = 'within'
    contains = 'contains'
    overlaps = 'overlaps'


class GeorelItem(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: StrictStr


class Georel(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[GeorelEnum, GeorelItem]


class Coordinates(BaseModel):
    class Config:
        allow_population_by_field_name = True

    __root__: Union[
        geometry.Position,
        geometry.PositionArray,
        geometry.LineString,
        geometry.Polygon,
    ]


class Geometry(Enum):
    point = 'Point'
    multi_point = 'MultiPoint'
    line_string = 'LineString'
    multi_line_string = 'MultiLineString'
    polygon = 'Polygon'
    multi_polygon = 'MultiPolygon'


class Timerel(Enum):
    before = 'before'
    after = 'after'
    between = 'between'
