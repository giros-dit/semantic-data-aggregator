# generated by datamodel-codegen:
#   filename:  clarity_data_lake/object.json

from __future__ import annotations

from typing import Literal, Optional

from pydantic import Extra, Field, StrictInt, StrictStr

from .. import entity
from ..entity import Entity, Property, Relationship


class ContainedIn(Relationship):
    """
    Relationship. AWS S3 bucket which the object is contained in.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    object: StrictStr


class ETag(Property):
    """
    Property. AWS eTag identifier of the object.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictStr


class Key(Property):
    """
    Property. AWS key identifier of the object.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictStr


class LastModified(Property):
    """
    Property. Last modification date of the object.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: entity.DateTime


class OwnedBy(Relationship):
    """
    Relationship. AWS S3 owner by whom the object is owned.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    object: StrictStr


class Size(Property):
    """
    Property. Size of the object.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: StrictInt


class StorageClass(Property):
    """
    Property. AWS S3 storage class of the object.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    value: Optional[Literal['STANDARD']] = 'STANDARD'


class Object(Entity):
    """
    Entity that represents an object stored in 5G-CLARITY's DataLake platform.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    type: Optional[Literal['Object']] = Field(
        'Object', description='NGSI-LD Entity identifier. It has to be Object'
    )
    contained_in: ContainedIn = Field(..., alias='containedIn')
    e_tag: ETag = Field(..., alias='eTag')
    key: Key
    last_modified: LastModified = Field(..., alias='lastModified')
    owned_by: OwnedBy = Field(..., alias='ownedBy')
    size: Size
    storage_class: StorageClass = Field(..., alias='storageClass')
