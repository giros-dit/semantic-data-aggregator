# generated by datamodel-codegen:
#   filename:  subscription.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Literal, Optional

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictStr

from . import common


class Attribute(BaseModel):
    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    __root__: StrictStr


class Status(Enum):
    ok = 'ok'
    failed = 'failed'


class Status1(Enum):
    active = 'active'
    paused = 'paused'
    expired = 'expired'


class NotificationParams(BaseModel):
    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    attributes: Optional[List[Attribute]] = Field(
        None, min_items=1, unique_items=True
    )
    format: Optional[StrictStr]
    endpoint: common.Endpoint
    status: Optional[Status]
    times_sent: Optional[StrictFloat] = Field(None, alias='timesSent')
    last_notification: Optional[datetime] = Field(
        None, alias='lastNotification'
    )
    last_failure: Optional[datetime] = Field(None, alias='lastFailure')
    last_success: Optional[datetime] = Field(None, alias='lastSuccess')


class GeoQuery(BaseModel):
    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    georel: common.Georel
    coordinates: common.Coordinates
    geometry: common.Geometry


class SubscriptionFragment(BaseModel):
    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    context: Optional[common.LdContext] = Field(None, alias='@context')
    entities: Optional[List[common.EntityInfo]] = Field(None, min_items=1)
    name: Optional[StrictStr]
    description: Optional[StrictStr]
    watched_attributes: Optional[List[common.Name]] = Field(
        None, alias='watchedAttributes', min_items=1, unique_items=True
    )
    time_interval: Optional[StrictFloat] = Field(None, alias='timeInterval')
    expires: Optional[datetime]
    is_active: Optional[StrictBool] = Field(None, alias='isActive')
    throttling: Optional[StrictFloat]
    q: Optional[StrictStr]
    geo_q: Optional[GeoQuery] = Field(None, alias='geoQ')
    csf: Optional[StrictStr]


class Subscription(SubscriptionFragment):
    class Config:
        validate_assignment = True
        allow_population_by_field_name = True

    id: Optional[StrictStr]
    type: Optional[Literal['Subscription']] = 'Subscription'
    notification: Optional[NotificationParams]
    status: Optional[Status1]
    created_at: Optional[common.CreatedAt] = Field(None, alias='createdAt')
    modified_at: Optional[common.ModifiedAt] = Field(None, alias='modifiedAt')


class NgsiLdSubscription(Subscription):
    """
    NGSI-LD Subscription
    """

    pass

    class Config:
        validate_assignment = True
        allow_population_by_field_name = True
