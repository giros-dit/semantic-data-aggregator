{
	"info": {
		"_postman_id": "0a35461f-cd9f-426f-bf04-f51f2efd282b",
		"name": "EVESource_Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "5G EVE",
					"item": [
						{
							"name": "Create Kafka EVE Endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"input_endpoint\", \"urn:ngsi-ld:Endpoint:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_endpoint}}\",\n    \"type\": \"Endpoint\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka-EVE\"\n    },\n    \"uri\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka:9092\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create KafkaBroker",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"input_kafka_broker_id\", \"urn:ngsi-ld:KafkaBroker:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_kafka_broker_id}}\",\n    \"type\": \"KafkaBroker\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"5tonic-kafka-broker\"\n    },\n    \"version\": {\n        \"type\": \"Property\",\n        \"value\": \"2.7.0\"\n    },\n    \"hasEndpoint\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_endpoint}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create KafkaTopic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"input_kafka_topic_id\", \"urn:ngsi-ld:KafkaTopic:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_kafka_topic_id}}\",\n    \"type\": \"KafkaTopic\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"spain-5tonic.topic-1\"\n    },\n    \"hasKafkaBroker\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_kafka_broker_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "SDA",
					"item": [
						{
							"name": "Create SDA Endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"output_endpoint\", \"urn:ngsi-ld:Endpoint:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{output_endpoint}}\",\n    \"type\": \"Endpoint\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka-SDA\"\n    },\n    \"uri\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka:9092\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create KafkaBroker",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"output_kafka_broker_id\", \"urn:ngsi-ld:KafkaBroker:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{output_kafka_broker_id}}\",\n    \"type\": \"KafkaBroker\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"sda-kafka-broker\"\n    },\n    \"version\": {\n        \"type\": \"Property\",\n        \"value\": \"2.7.0\"\n    },\n    \"hasEndpoint\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{output_endpoint}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create KafkaTopic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"output_kafka_topic_id\", \"urn:ngsi-ld:KafkaTopic:\" + myUUID);",
											"pm.collectionVariables.set(\"output_kafka_topic_name\", \"eve-source-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{output_kafka_topic_id}}\",\n    \"type\": \"KafkaTopic\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"{{output_kafka_topic_name}}\"\n    },\n    \"hasKafkaBroker\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{output_kafka_broker_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "EVESource",
					"item": [
						{
							"name": "Get EVESource AppId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"eve_source_app_id\", jsonData[0].id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Application&q=name==\"EVESource\"",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Application"
										},
										{
											"key": "q",
											"value": "name==\"EVESource\""
										}
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Create EVESource Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.collectionVariables.set(\"eve_source_task_id\", \"urn:ngsi-ld:Task:\" + myUUID);",
											"pm.collectionVariables.set(\"eve_source_groupId\", \"eve-source-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{eve_source_task_id}}\",\n    \"type\": \"Task\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"evesource\"\n    },\n    \"arguments\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"groupId\": \"{{eve_source_groupId}}\"\n        }\n    },\n    \"hasApplication\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{eve_source_app_id}}\"\n    },\n    \"hasInput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_kafka_topic_id}}\"\n    },\n    \"hasOutput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{output_kafka_topic_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "EVESource",
					"item": [
						{
							"name": "End EVESource Task",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"action\": {\r\n        \"type\": \"Property\", \r\n        \"value\": \"END\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{eve_source_task_id}}/attrs",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{eve_source_task_id}}",
										"attrs"
									]
								},
								"description": "update the attribute of entity"
							},
							"response": []
						}
					]
				},
				{
					"name": "5G EVE",
					"item": [
						{
							"name": "Delete Input KafkaTopic",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{input_kafka_topic_id}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_kafka_topic_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete KafkaBroker",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{input_kafka_broker_id}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_kafka_broker_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete Endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{input_endpoint}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_endpoint}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						}
					]
				},
				{
					"name": "SDA",
					"item": [
						{
							"name": "Delete Output KafkaTopic",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{output_kafka_topic_id}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{output_kafka_topic_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete KafkaBroker",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{output_kafka_broker_id}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{output_kafka_broker_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete kafka Endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{output_endpoint}}",
									"protocol": "http",
									"host": [
										"{{broker}}"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{output_endpoint}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Queries",
			"item": [
				{
					"name": "Query Entity Data by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/{{eve_source_app_id}}",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"{{eve_source_app_id}}"
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "Query Entity Data by type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{broker}}/ngsi-ld/v1/entities/?type=Task",
							"protocol": "http",
							"host": [
								"{{broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Task"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "broker",
			"value": "localhost:9090"
		},
		{
			"key": "context.jsonld",
			"value": "http://context-catalog:8080/context.jsonld"
		},
		{
			"key": "output_kafka_topic_id",
			"value": ""
		},
		{
			"key": "output_kafka_broker_id",
			"value": ""
		},
		{
			"key": "output_kafka_topic_name",
			"value": ""
		},
		{
			"key": "output_endpoint",
			"value": ""
		},
		{
			"key": "input_endpoint",
			"value": ""
		},
		{
			"key": "input_kafka_broker_id",
			"value": ""
		},
		{
			"key": "input_kafka_topic_id",
			"value": ""
		},
		{
			"key": "eve_source_app_id",
			"value": ""
		},
		{
			"key": "eve_source_task_id",
			"value": ""
		},
		{
			"key": "eve_source_groupId",
			"value": ""
		}
	]
}
