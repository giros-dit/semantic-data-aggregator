{
	"info": {
		"_postman_id": "64f2f206-49a3-4206-bf0f-b61f17fa6c0f",
		"name": "Prometheus_5GVINNI_Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Prometheus",
					"item": [
						{
							"name": "Create prom Endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"input_prometheus_endpoint_id\", \"urn:ngsi-ld:Endpoint:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_prometheus_endpoint_id}}\",\n    \"type\": \"Endpoint\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"prometheus-api-5G-VINNI\"\n    },\n    \"uri\": {\n        \"type\": \"Property\",\n        \"value\": \"{{input_prometheus_endpoint_uri}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create Prometheus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"input_prometheus_id\", \"urn:ngsi-ld:Prometheus:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_prometheus_id}}\",\n    \"type\": \"Prometheus\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"prometheus-server-5G-VINNI\"\n    },\n    \"version\": {\n        \"type\": \"Property\",\n        \"value\": \"2.28.1\"\n    },\n    \"hasEndpoint\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_prometheus_endpoint_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create Label host",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"label_1_id\", \"urn:ngsi-ld:Label:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{label_1_id}}\",\n    \"type\": \"Label\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"host\"\n    },\n    \"description\": {\n        \"type\": \"Property\",\n        \"value\": \"IP address of target host to which latency is measured\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create MetricFamily linklatency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"input_metric_familiy_id\", \"urn:ngsi-ld:MetricFamily:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_metric_familiy_id}}\",\n    \"type\": \"MetricFamily\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"{{input_metric_familiy_name}}\"\n    },\n    \"familyType\": {\n        \"type\": \"Property\",\n        \"value\": \"{{input_metric_familiy_type}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create Metric linklatency",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"input_metric_id\", \"urn:ngsi-ld:Metric:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{input_metric_id}}\",\n    \"type\": \"Metric\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"{{input_metric_name}}\"\n    },\n    \"hasLabels\": {\n        \"type\": \"Relationship\",\n        \"object\": [\n            \"{{label_1_id}}\"\n        ]\n    },\n    \"hasPrometheus\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_prometheus_id}}\"\n    },\n    \"hasMetricFamily\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_metric_familiy_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "SDA",
					"item": [
						{
							"name": "Create SDA Endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"sda_kafka_endpoint_id\", \"urn:ngsi-ld:Endpoint:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{sda_kafka_endpoint_id}}\",\n    \"type\": \"Endpoint\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka-SDA\"\n    },\n    \"uri\": {\n        \"type\": \"Property\",\n        \"value\": \"kafka:9092\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create KafkaBroker",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"sda_kafka_broker_id\", \"urn:ngsi-ld:KafkaBroker:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{sda_kafka_broker_id}}\",\n    \"type\": \"KafkaBroker\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"sda-kafka-broker\"\n    },\n    \"version\": {\n        \"type\": \"Property\",\n        \"value\": \"2.7.0\"\n    },\n    \"hasEndpoint\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{sda_kafka_endpoint_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create output KafkaTopic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"source_output_kafka_topic_id\", \"urn:ngsi-ld:KafkaTopic:\" + myUUID);",
											"pm.environment.set(\"source_output_kafka_topic_name\", \"metric-source-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{source_output_kafka_topic_id}}\",\n    \"type\": \"KafkaTopic\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"{{source_output_kafka_topic_name}}\"\n    },\n    \"hasKafkaBroker\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{sda_kafka_broker_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create transformation KafkaTopic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"transformation_output_kafka_topic_id\", \"urn:ngsi-ld:KafkaTopic:\" + myUUID);",
											"pm.environment.set(\"transformation_output_kafka_topic_name\", \"metric-source-transformation-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{transformation_output_kafka_topic_id}}\",\n    \"type\": \"KafkaTopic\",\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"{{transformation_output_kafka_topic_name}}\"\n    },\n    \"hasKafkaBroker\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{sda_kafka_broker_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "MetricSource",
					"item": [
						{
							"name": "Get MetricSource AppId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"metric_source_app_id\", jsonData[0].id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/?type=Application&q=name==\"MetricSource\"",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Application"
										},
										{
											"key": "q",
											"value": "name==\"MetricSource\""
										}
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Create MetricSource Task - vm_cpu_perc",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"metric_source_task_id\", \"urn:ngsi-ld:Task:\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{metric_source_task_id}}\",\n    \"type\": \"Task\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"metricsource-5G-VINNI\"\n    },\n    \"arguments\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"interval\": \"{{sampling_interval}}\"\n        }\n    },\n    \"hasApplication\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{metric_source_app_id}}\"\n    },\n    \"hasInput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{input_metric_id}}\"\n    },\n    \"hasOutput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{source_output_kafka_topic_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "Transformer",
					"item": [
						{
							"name": "Get Transformer AppId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"transformer_app_id\", jsonData[0].id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/?type=Application&q=name==\"PrometheusToOpenmetricsTransformer\"",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Application"
										},
										{
											"key": "q",
											"value": "name==\"PrometheusToOpenmetricsTransformer\""
										}
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Create Transformer Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"transformer_task_id\", \"urn:ngsi-ld:Task:\" + myUUID);",
											"pm.environment.set(\"metric_source_groupId\", \"metric-source-transformation-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{transformer_task_id}}\",\n    \"type\": \"Task\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"transformer-5G-VINNI\"\n    },\n    \"arguments\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"groupId\": \"{{metric_source_groupId}}\"\n        }\n    },\n    \"hasApplication\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{transformer_app_id}}\"\n    },\n    \"hasInput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{source_output_kafka_topic_id}}\"\n    },\n    \"hasOutput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{transformation_output_kafka_topic_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				},
				{
					"name": "MetricTargetExporter",
					"item": [
						{
							"name": "Create Endpoint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"output_prometheus_exporter_endpoint_id\", \"urn:ngsi-ld:Endpoint:\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"sda_ip_address = pm.environment.get(\"sda_ip_address\");\r",
											"output_prometheus_exporter_path = pm.environment.get(\"output_prometheus_exporter_path\")\r",
											"pm.environment.set(\"output_prometheus_exporter_uri\",\"http://\" + sda_ip_address + \":8444/metrics/\" + output_prometheus_exporter_path)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{output_prometheus_exporter_endpoint_id}}\",\n    \"type\": \"Endpoint\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"prometheus-exporter-endpoint\"\n    },\n    \"uri\": {\n        \"type\": \"Property\",\n        \"value\": \"http://{{sda_ip_address}}:8444/metrics/{{output_prometheus_exporter_path}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Create PrometheusExporter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"output_prometheus_exporter_id\", \"urn:ngsi-ld:PrometheusExporter:\" + myUUID);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{output_prometheus_exporter_id}}\",\n    \"type\": \"PrometheusExporter\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"SDA-prometheus-exporter\"\n    },\n    \"hasEndpoint\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{output_prometheus_exporter_endpoint_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						},
						{
							"name": "Get MetricTargetExporterAppId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"metric_target_exporter_app_id\", jsonData[0].id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/?type=Application&q=name==\"MetricTargetExporter\"",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "Application"
										},
										{
											"key": "q",
											"value": "name==\"MetricTargetExporter\""
										}
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Create MetricTargetExporter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid')",
											"var myUUID = uuid.v4()",
											"pm.environment.set(\"metric_target_exporter_task_id\", \"urn:ngsi-ld:Task:\" + myUUID);",
											"pm.environment.set(\"metric_target_exporter_groupId\", \"metric-target-exporter-\" + myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{metric_target_exporter_task_id}}\",\n    \"type\": \"Task\",\n    \"action\": {\n        \"type\": \"Property\",\n        \"value\": \"START\"\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"metric-exporter-demo\"\n    },\n    \"arguments\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"groupId\": \"{{output_prometheus_exporter_id}}\"\n        }\n    },\n    \"hasApplication\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{metric_target_exporter_app_id}}\"\n    },\n    \"hasInput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{transformation_output_kafka_topic_id}}\"\n    },\n    \"hasOutput\": {\n        \"type\": \"Relationship\",\n        \"object\": \"{{output_prometheus_exporter_id}}\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										""
									]
								},
								"description": "New context data entities can be created by making a POST request to the `/ngsi-ld/v1/entities` endpoint and supply an `@context` along with structured **NGSI-LD** data.\n\nThe first request will take some time, as the context broker must navigate and load all of the files mentioned in the\n`@context`.\n\nSince the `Content-Type: application/ld+json` the `@context` is supplied in the body of the request. As with all **NGSI-LD** interactions, the core **NGSI-LD** `@context` ([`https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld) is implicitly included as well.)\n\nThis means that the actual `@context` is:\n\n```jsonld\n{\n    \"@context\": [\n        \"http://context-provider:3000/data-models/ngsi-context.jsonld\",\n        \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"\n    ]\n}\n```\n\nwith the core `@context` being processed **last** and therefore overriding any terms previously defined with the same `@id`."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "MetricTargetExporter",
					"item": [
						{
							"name": "End MetricSource Task",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"action\": {\r\n        \"type\": \"Property\", \r\n        \"value\": \"END\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{metric_target_exporter_task_id}}/attrs",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{metric_target_exporter_task_id}}",
										"attrs"
									]
								},
								"description": "update the attribute of entity"
							},
							"response": []
						},
						{
							"name": "Delete PrometheusExporter",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{output_prometheus_exporter_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{output_prometheus_exporter_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete Endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{output_prometheus_exporter_endpoint_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{output_prometheus_exporter_endpoint_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						}
					]
				},
				{
					"name": "Transformer",
					"item": [
						{
							"name": "End Transformer Task",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"action\": {\r\n        \"type\": \"Property\", \r\n        \"value\": \"END\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{transformer_task_id}}/attrs",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{transformer_task_id}}",
										"attrs"
									]
								},
								"description": "update the attribute of entity"
							},
							"response": []
						}
					]
				},
				{
					"name": "MetricSource",
					"item": [
						{
							"name": "End MetricSource Task",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Link",
										"type": "text",
										"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"action\": {\r\n        \"type\": \"Property\", \r\n        \"value\": \"END\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{metric_source_task_id}}/attrs",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{metric_source_task_id}}",
										"attrs"
									]
								},
								"description": "update the attribute of entity"
							},
							"response": []
						}
					]
				},
				{
					"name": "Prometheus",
					"item": [
						{
							"name": "Delete Metric",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{input_metric_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_metric_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete MetricFamily",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{input_metric_familiy_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_metric_familiy_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete Prometheus",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{input_prometheus_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_prometheus_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete Endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{input_prometheus_endpoint_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{input_prometheus_endpoint_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						}
					]
				},
				{
					"name": "SDA",
					"item": [
						{
							"name": "Delete KafkaTopic",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{source_output_kafka_topic_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{source_output_kafka_topic_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete KafkaTopic Transformer",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{transformation_output_kafka_topic_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{transformation_output_kafka_topic_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete KafkaBroker",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{sda_kafka_broker_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{sda_kafka_broker_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						},
						{
							"name": "Delete kafka Endpoint",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{sda_kafka_endpoint_id}}",
									"protocol": "http",
									"host": [
										"{{sda_ip_address}}:9090"
									],
									"path": [
										"ngsi-ld",
										"v1",
										"entities",
										"{{sda_kafka_endpoint_id}}"
									]
								},
								"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Queries",
			"item": [
				{
					"name": "Query Entity Data by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/{{metric_source_app_id}}",
							"protocol": "http",
							"host": [
								"{{sda_ip_address}}:9090"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"{{metric_source_app_id}}"
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				},
				{
					"name": "Query Entity Data by type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Link",
								"value": "<{{context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{sda_ip_address}}:9090/ngsi-ld/v1/entities/?type=Task",
							"protocol": "http",
							"host": [
								"{{sda_ip_address}}:9090"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Task"
								}
							]
						},
						"description": "This example returns the data of `urn:ngsi-ld:Building:farm001`. The NGSI-LD `@context` is supplied as a [`Link` header](https://www.w3.org/wiki/LinkHeader) to define the entities returned. The `ngsi-context.jsonld` `@context` file is just supplying short names for every attribute.\n\nThe full link header syntax can be seen below:\n\n```text\nLink: <https://fiware.github.io/data-models/context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\n```\n\nThe standard HTTP `Link` header allows metadata (in this case the `@context`) to be passed in without actually touching\nthe resource in question. In the case of NGSI-LD, the metadata is a file in `application/ld+json` format."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "broker",
			"value": "localhost:9090"
		},
		{
			"key": "context.jsonld",
			"value": "http://context-catalog:8080/context.jsonld"
		}
	]
}
