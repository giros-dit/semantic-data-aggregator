# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_so_instantiation_metrics_logparser_instantiation_operation__so_instantiation_metrics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module logparser-instantiation-operation - based on the path /so-instantiation-metrics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service instantiation operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__Current_time','__Operation','__NS_ID','__NSD_ID','__Total_instantiation_time','__SOE_time','__ROE_time','__Operation_ID_for_instantiation_op','__Hierarchical_SOE_dispatching_SOEpSOEc','__ROE_created_VLs','__ROE_retrieve_RL_resources','__ROE_parsing_NSDs','__ROE_updating_DBs','__ROE_extract_VLs','__Retrieving_descriptor_from_catalogue_DBs','__PA_calculation','__Create_threshold_based_alerts','__Create_monitoring_jobs','__Create_AIML_alerts','__CoreMANO_Wrapper_time',)

  _yang_name = 'so-instantiation-metrics'
  _yang_namespace = 'http://data-aggregator.com/ns/so-log-parser/instantiation-op'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__Current_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="Current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='ietf-types:date-and-time', is_config=False)
    self.__Operation = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    self.__NS_ID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NS_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    self.__NSD_ID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NSD_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    self.__Total_instantiation_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Total_instantiation_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__SOE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Operation_ID_for_instantiation_op = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Operation_ID_for_instantiation_op", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Hierarchical_SOE_dispatching_SOEpSOEc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Hierarchical_SOE_dispatching_SOEpSOEc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_created_VLs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_created_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_retrieve_RL_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_retrieve_RL_resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_parsing_NSDs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_parsing_NSDs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_updating_DBs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__ROE_extract_VLs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_extract_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Retrieving_descriptor_from_catalogue_DBs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Retrieving_descriptor_from_catalogue_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__PA_calculation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="PA_calculation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Create_threshold_based_alerts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_threshold_based_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Create_monitoring_jobs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_monitoring_jobs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__Create_AIML_alerts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_AIML_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    self.__CoreMANO_Wrapper_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_Wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['so-instantiation-metrics']

  def _get_Current_time(self):
    """
    Getter method for Current_time, mapped from YANG variable /so_instantiation_metrics/Current_time (ietf-types:date-and-time)

    YANG Description: Date and time in which the time-related metric values have been sent to Kafka (following the ISO 8601 format).
    """
    return self.__Current_time
      
  def _set_Current_time(self, v, load=False):
    """
    Setter method for Current_time, mapped from YANG variable /so_instantiation_metrics/Current_time (ietf-types:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Current_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Current_time() directly.

    YANG Description: Date and time in which the time-related metric values have been sent to Kafka (following the ISO 8601 format).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="Current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='ietf-types:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Current_time must be of a type compatible with ietf-types:date-and-time""",
          'defined-type': "ietf-types:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="Current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='ietf-types:date-and-time', is_config=False)""",
        })

    self.__Current_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Current_time(self):
    self.__Current_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="Current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='ietf-types:date-and-time', is_config=False)


  def _get_Operation(self):
    """
    Getter method for Operation, mapped from YANG variable /so_instantiation_metrics/Operation (string)

    YANG Description: Identifier of the type of operation (i.e., Instantiation).
    """
    return self.__Operation
      
  def _set_Operation(self, v, load=False):
    """
    Setter method for Operation, mapped from YANG variable /so_instantiation_metrics/Operation (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Operation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Operation() directly.

    YANG Description: Identifier of the type of operation (i.e., Instantiation).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="Operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Operation must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)""",
        })

    self.__Operation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Operation(self):
    self.__Operation = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="Operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)


  def _get_NS_ID(self):
    """
    Getter method for NS_ID, mapped from YANG variable /so_instantiation_metrics/NS_ID (string)

    YANG Description: Network Service Identifier.
    """
    return self.__NS_ID
      
  def _set_NS_ID(self, v, load=False):
    """
    Setter method for NS_ID, mapped from YANG variable /so_instantiation_metrics/NS_ID (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_NS_ID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_NS_ID() directly.

    YANG Description: Network Service Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="NS_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """NS_ID must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NS_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)""",
        })

    self.__NS_ID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_NS_ID(self):
    self.__NS_ID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NS_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)


  def _get_NSD_ID(self):
    """
    Getter method for NSD_ID, mapped from YANG variable /so_instantiation_metrics/NSD_ID (string)

    YANG Description: Network Service Descriptor Identifier.
    """
    return self.__NSD_ID
      
  def _set_NSD_ID(self, v, load=False):
    """
    Setter method for NSD_ID, mapped from YANG variable /so_instantiation_metrics/NSD_ID (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_NSD_ID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_NSD_ID() directly.

    YANG Description: Network Service Descriptor Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="NSD_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """NSD_ID must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NSD_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)""",
        })

    self.__NSD_ID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_NSD_ID(self):
    self.__NSD_ID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="NSD_ID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='string', is_config=False)


  def _get_Total_instantiation_time(self):
    """
    Getter method for Total_instantiation_time, mapped from YANG variable /so_instantiation_metrics/Total_instantiation_time (int64)

    YANG Description: Network service total instantiation time. The time it takes since the 5Gr-SO created the service identifier for a network service until it has been totally instantiated.
    """
    return self.__Total_instantiation_time
      
  def _set_Total_instantiation_time(self, v, load=False):
    """
    Setter method for Total_instantiation_time, mapped from YANG variable /so_instantiation_metrics/Total_instantiation_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Total_instantiation_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Total_instantiation_time() directly.

    YANG Description: Network service total instantiation time. The time it takes since the 5Gr-SO created the service identifier for a network service until it has been totally instantiated.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Total_instantiation_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Total_instantiation_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Total_instantiation_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Total_instantiation_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Total_instantiation_time(self):
    self.__Total_instantiation_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Total_instantiation_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_SOE_time(self):
    """
    Getter method for SOE_time, mapped from YANG variable /so_instantiation_metrics/SOE_time (int64)

    YANG Description: Time spent in the Service Orchestration Engine (SOE) module (both at SOE parent, SOE child sub-modules) during the instantiation process.
    """
    return self.__SOE_time
      
  def _set_SOE_time(self, v, load=False):
    """
    Setter method for SOE_time, mapped from YANG variable /so_instantiation_metrics/SOE_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_SOE_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_SOE_time() directly.

    YANG Description: Time spent in the Service Orchestration Engine (SOE) module (both at SOE parent, SOE child sub-modules) during the instantiation process.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """SOE_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__SOE_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_SOE_time(self):
    self.__SOE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_time(self):
    """
    Getter method for ROE_time, mapped from YANG variable /so_instantiation_metrics/ROE_time (int64)

    YANG Description: Time spent in the Resource Orchestration Engine (ROE) module during the instantiation process.
    """
    return self.__ROE_time
      
  def _set_ROE_time(self, v, load=False):
    """
    Setter method for ROE_time, mapped from YANG variable /so_instantiation_metrics/ROE_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_time() directly.

    YANG Description: Time spent in the Resource Orchestration Engine (ROE) module during the instantiation process.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_time(self):
    self.__ROE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Operation_ID_for_instantiation_op(self):
    """
    Getter method for Operation_ID_for_instantiation_op, mapped from YANG variable /so_instantiation_metrics/Operation_ID_for_instantiation_op (int64)

    YANG Description: The time it takes the Northbound Interface (NBI) to generate an ID to identify the instantiation operation.
    """
    return self.__Operation_ID_for_instantiation_op
      
  def _set_Operation_ID_for_instantiation_op(self, v, load=False):
    """
    Setter method for Operation_ID_for_instantiation_op, mapped from YANG variable /so_instantiation_metrics/Operation_ID_for_instantiation_op (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Operation_ID_for_instantiation_op is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Operation_ID_for_instantiation_op() directly.

    YANG Description: The time it takes the Northbound Interface (NBI) to generate an ID to identify the instantiation operation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Operation_ID_for_instantiation_op", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Operation_ID_for_instantiation_op must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Operation_ID_for_instantiation_op", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Operation_ID_for_instantiation_op = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Operation_ID_for_instantiation_op(self):
    self.__Operation_ID_for_instantiation_op = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Operation_ID_for_instantiation_op", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Hierarchical_SOE_dispatching_SOEpSOEc(self):
    """
    Getter method for Hierarchical_SOE_dispatching_SOEpSOEc, mapped from YANG variable /so_instantiation_metrics/Hierarchical_SOE_dispatching_SOEpSOEc (int64)

    YANG Description: The time the hierarchical Service Orchestration Engine (SOE) uses to select the appropriate instantiation process based on the nature of the service (single NS, composite NS).
    """
    return self.__Hierarchical_SOE_dispatching_SOEpSOEc
      
  def _set_Hierarchical_SOE_dispatching_SOEpSOEc(self, v, load=False):
    """
    Setter method for Hierarchical_SOE_dispatching_SOEpSOEc, mapped from YANG variable /so_instantiation_metrics/Hierarchical_SOE_dispatching_SOEpSOEc (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Hierarchical_SOE_dispatching_SOEpSOEc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Hierarchical_SOE_dispatching_SOEpSOEc() directly.

    YANG Description: The time the hierarchical Service Orchestration Engine (SOE) uses to select the appropriate instantiation process based on the nature of the service (single NS, composite NS).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Hierarchical_SOE_dispatching_SOEpSOEc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Hierarchical_SOE_dispatching_SOEpSOEc must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Hierarchical_SOE_dispatching_SOEpSOEc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Hierarchical_SOE_dispatching_SOEpSOEc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Hierarchical_SOE_dispatching_SOEpSOEc(self):
    self.__Hierarchical_SOE_dispatching_SOEpSOEc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Hierarchical_SOE_dispatching_SOEpSOEc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_created_VLs(self):
    """
    Getter method for ROE_created_VLs, mapped from YANG variable /so_instantiation_metrics/ROE_created_VLs (int64)

    YANG Description: Time in the interaction between Resource Orchestration Engine (ROE) and Resource Layer (RL) to allocate resources in the Logical Links (LLs) based on the ROE extract request.
    """
    return self.__ROE_created_VLs
      
  def _set_ROE_created_VLs(self, v, load=False):
    """
    Setter method for ROE_created_VLs, mapped from YANG variable /so_instantiation_metrics/ROE_created_VLs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_created_VLs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_created_VLs() directly.

    YANG Description: Time in the interaction between Resource Orchestration Engine (ROE) and Resource Layer (RL) to allocate resources in the Logical Links (LLs) based on the ROE extract request.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_created_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_created_VLs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_created_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_created_VLs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_created_VLs(self):
    self.__ROE_created_VLs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_created_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_retrieve_RL_resources(self):
    """
    Getter method for ROE_retrieve_RL_resources, mapped from YANG variable /so_instantiation_metrics/ROE_retrieve_RL_resources (int64)

    YANG Description: The time to recollect the information from the Resource Layer (RL).
    """
    return self.__ROE_retrieve_RL_resources
      
  def _set_ROE_retrieve_RL_resources(self, v, load=False):
    """
    Setter method for ROE_retrieve_RL_resources, mapped from YANG variable /so_instantiation_metrics/ROE_retrieve_RL_resources (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_retrieve_RL_resources is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_retrieve_RL_resources() directly.

    YANG Description: The time to recollect the information from the Resource Layer (RL).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_retrieve_RL_resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_retrieve_RL_resources must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_retrieve_RL_resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_retrieve_RL_resources = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_retrieve_RL_resources(self):
    self.__ROE_retrieve_RL_resources = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_retrieve_RL_resources", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_parsing_NSDs(self):
    """
    Getter method for ROE_parsing_NSDs, mapped from YANG variable /so_instantiation_metrics/ROE_parsing_NSDs (int64)

    YANG Description: The time at Resource Orchestration Engine (ROE) submodule to parse NSD and VNFDs of an network service to get the required information for Placement Algorithm (PA).
    """
    return self.__ROE_parsing_NSDs
      
  def _set_ROE_parsing_NSDs(self, v, load=False):
    """
    Setter method for ROE_parsing_NSDs, mapped from YANG variable /so_instantiation_metrics/ROE_parsing_NSDs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_parsing_NSDs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_parsing_NSDs() directly.

    YANG Description: The time at Resource Orchestration Engine (ROE) submodule to parse NSD and VNFDs of an network service to get the required information for Placement Algorithm (PA).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_parsing_NSDs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_parsing_NSDs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_parsing_NSDs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_parsing_NSDs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_parsing_NSDs(self):
    self.__ROE_parsing_NSDs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_parsing_NSDs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_updating_DBs(self):
    """
    Getter method for ROE_updating_DBs, mapped from YANG variable /so_instantiation_metrics/ROE_updating_DBs (int64)

    YANG Description: Time to update databases (DBs) to declare the network service as operative and the instantiation operation as successful.
    """
    return self.__ROE_updating_DBs
      
  def _set_ROE_updating_DBs(self, v, load=False):
    """
    Setter method for ROE_updating_DBs, mapped from YANG variable /so_instantiation_metrics/ROE_updating_DBs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_updating_DBs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_updating_DBs() directly.

    YANG Description: Time to update databases (DBs) to declare the network service as operative and the instantiation operation as successful.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_updating_DBs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_updating_DBs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_updating_DBs(self):
    self.__ROE_updating_DBs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_ROE_extract_VLs(self):
    """
    Getter method for ROE_extract_VLs, mapped from YANG variable /so_instantiation_metrics/ROE_extract_VLs (int64)

    YANG Description: The time it takes the Resource Orchestration Engine (ROE) to determine the request of the different Virtual Links (VLs) needing resources in the Logical Links (LLs) because
connected VNFs have been deployed in multiple Virtualized Infrastructure Managers (VIMs).
    """
    return self.__ROE_extract_VLs
      
  def _set_ROE_extract_VLs(self, v, load=False):
    """
    Setter method for ROE_extract_VLs, mapped from YANG variable /so_instantiation_metrics/ROE_extract_VLs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_extract_VLs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_extract_VLs() directly.

    YANG Description: The time it takes the Resource Orchestration Engine (ROE) to determine the request of the different Virtual Links (VLs) needing resources in the Logical Links (LLs) because
connected VNFs have been deployed in multiple Virtualized Infrastructure Managers (VIMs).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_extract_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_extract_VLs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_extract_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_extract_VLs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_extract_VLs(self):
    self.__ROE_extract_VLs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_extract_VLs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Retrieving_descriptor_from_catalogue_DBs(self):
    """
    Getter method for Retrieving_descriptor_from_catalogue_DBs, mapped from YANG variable /so_instantiation_metrics/Retrieving_descriptor_from_catalogue_DBs (int64)

    YANG Description: The time to collect the descriptor from the network service descriptor (NSD) catalogue.
    """
    return self.__Retrieving_descriptor_from_catalogue_DBs
      
  def _set_Retrieving_descriptor_from_catalogue_DBs(self, v, load=False):
    """
    Setter method for Retrieving_descriptor_from_catalogue_DBs, mapped from YANG variable /so_instantiation_metrics/Retrieving_descriptor_from_catalogue_DBs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Retrieving_descriptor_from_catalogue_DBs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Retrieving_descriptor_from_catalogue_DBs() directly.

    YANG Description: The time to collect the descriptor from the network service descriptor (NSD) catalogue.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Retrieving_descriptor_from_catalogue_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Retrieving_descriptor_from_catalogue_DBs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Retrieving_descriptor_from_catalogue_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Retrieving_descriptor_from_catalogue_DBs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Retrieving_descriptor_from_catalogue_DBs(self):
    self.__Retrieving_descriptor_from_catalogue_DBs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Retrieving_descriptor_from_catalogue_DBs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_PA_calculation(self):
    """
    Getter method for PA_calculation, mapped from YANG variable /so_instantiation_metrics/PA_calculation (int64)

    YANG Description: The time to build the request to the Placement Algorithm (PA), send it to the external PA service and receive its answers.
    """
    return self.__PA_calculation
      
  def _set_PA_calculation(self, v, load=False):
    """
    Setter method for PA_calculation, mapped from YANG variable /so_instantiation_metrics/PA_calculation (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_PA_calculation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_PA_calculation() directly.

    YANG Description: The time to build the request to the Placement Algorithm (PA), send it to the external PA service and receive its answers.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="PA_calculation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """PA_calculation must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="PA_calculation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__PA_calculation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_PA_calculation(self):
    self.__PA_calculation = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="PA_calculation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Create_threshold_based_alerts(self):
    """
    Getter method for Create_threshold_based_alerts, mapped from YANG variable /so_instantiation_metrics/Create_threshold_based_alerts (int64)

    YANG Description: Time interaction between SOE-SLA Manager modules of the 5Gr-SO to determine the threshold-alerts objects (if there is not AI/ML treatment) to be configured at the 5Gr-VoMS
plus the interaction to configure them at the 5GR-VoMs and receive the associated object identifiers and update the information in Network Service Instantiation Resource
(NSIR) database.
    """
    return self.__Create_threshold_based_alerts
      
  def _set_Create_threshold_based_alerts(self, v, load=False):
    """
    Setter method for Create_threshold_based_alerts, mapped from YANG variable /so_instantiation_metrics/Create_threshold_based_alerts (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Create_threshold_based_alerts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Create_threshold_based_alerts() directly.

    YANG Description: Time interaction between SOE-SLA Manager modules of the 5Gr-SO to determine the threshold-alerts objects (if there is not AI/ML treatment) to be configured at the 5Gr-VoMS
plus the interaction to configure them at the 5GR-VoMs and receive the associated object identifiers and update the information in Network Service Instantiation Resource
(NSIR) database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_threshold_based_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Create_threshold_based_alerts must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_threshold_based_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Create_threshold_based_alerts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Create_threshold_based_alerts(self):
    self.__Create_threshold_based_alerts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_threshold_based_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Create_monitoring_jobs(self):
    """
    Getter method for Create_monitoring_jobs, mapped from YANG variable /so_instantiation_metrics/Create_monitoring_jobs (int64)

    YANG Description: Time interaction between SOE-Monitoring Manager modules of 5Gr-SO to determine the monitoring jobs (exporters) and dashboards to be configured at the 5Gr-VoMS plus the interaction
to configure them and receive the associated object identifiers and update the information in Network Service Instantiation Resource (NSIR) database.
    """
    return self.__Create_monitoring_jobs
      
  def _set_Create_monitoring_jobs(self, v, load=False):
    """
    Setter method for Create_monitoring_jobs, mapped from YANG variable /so_instantiation_metrics/Create_monitoring_jobs (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Create_monitoring_jobs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Create_monitoring_jobs() directly.

    YANG Description: Time interaction between SOE-Monitoring Manager modules of 5Gr-SO to determine the monitoring jobs (exporters) and dashboards to be configured at the 5Gr-VoMS plus the interaction
to configure them and receive the associated object identifiers and update the information in Network Service Instantiation Resource (NSIR) database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_monitoring_jobs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Create_monitoring_jobs must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_monitoring_jobs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Create_monitoring_jobs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Create_monitoring_jobs(self):
    self.__Create_monitoring_jobs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_monitoring_jobs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_Create_AIML_alerts(self):
    """
    Getter method for Create_AIML_alerts, mapped from YANG variable /so_instantiation_metrics/Create_AIML_alerts (int64)

    YANG Description: Time interaction between SOE-SLA Manager to configure the AI/ML workflow to drive scaling operations. The creation and configuration of the data engineering pipeline consist of:
i) interaction with 5Gr-VoMs to create a Kafka Topic, ii) interaction with the 5Gr-AIML platform to download the required model, iii) creation of inference job at Apache Spark,
iv) update of Network Service Instantiation Resource (NSIR) database.
    """
    return self.__Create_AIML_alerts
      
  def _set_Create_AIML_alerts(self, v, load=False):
    """
    Setter method for Create_AIML_alerts, mapped from YANG variable /so_instantiation_metrics/Create_AIML_alerts (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_Create_AIML_alerts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_Create_AIML_alerts() directly.

    YANG Description: Time interaction between SOE-SLA Manager to configure the AI/ML workflow to drive scaling operations. The creation and configuration of the data engineering pipeline consist of:
i) interaction with 5Gr-VoMs to create a Kafka Topic, ii) interaction with the 5Gr-AIML platform to download the required model, iii) creation of inference job at Apache Spark,
iv) update of Network Service Instantiation Resource (NSIR) database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_AIML_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """Create_AIML_alerts must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_AIML_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__Create_AIML_alerts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_Create_AIML_alerts(self):
    self.__Create_AIML_alerts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="Create_AIML_alerts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)


  def _get_CoreMANO_Wrapper_time(self):
    """
    Getter method for CoreMANO_Wrapper_time, mapped from YANG variable /so_instantiation_metrics/CoreMANO_Wrapper_time (int64)

    YANG Description: Time spent in the Core MANO Wrapper module during the instantiation process to create virtual network supporting the Virtual Links (VLs), the VMs supporting the VNFs, and
update the Network Service Instantiation Resource (NSIR) database.
    """
    return self.__CoreMANO_Wrapper_time
      
  def _set_CoreMANO_Wrapper_time(self, v, load=False):
    """
    Setter method for CoreMANO_Wrapper_time, mapped from YANG variable /so_instantiation_metrics/CoreMANO_Wrapper_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_CoreMANO_Wrapper_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_CoreMANO_Wrapper_time() directly.

    YANG Description: Time spent in the Core MANO Wrapper module during the instantiation process to create virtual network supporting the Virtual Links (VLs), the VMs supporting the VNFs, and
update the Network Service Instantiation Resource (NSIR) database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_Wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """CoreMANO_Wrapper_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_Wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)""",
        })

    self.__CoreMANO_Wrapper_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_CoreMANO_Wrapper_time(self):
    self.__CoreMANO_Wrapper_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_Wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='int64', is_config=False)

  Current_time = __builtin__.property(_get_Current_time)
  Operation = __builtin__.property(_get_Operation)
  NS_ID = __builtin__.property(_get_NS_ID)
  NSD_ID = __builtin__.property(_get_NSD_ID)
  Total_instantiation_time = __builtin__.property(_get_Total_instantiation_time)
  SOE_time = __builtin__.property(_get_SOE_time)
  ROE_time = __builtin__.property(_get_ROE_time)
  Operation_ID_for_instantiation_op = __builtin__.property(_get_Operation_ID_for_instantiation_op)
  Hierarchical_SOE_dispatching_SOEpSOEc = __builtin__.property(_get_Hierarchical_SOE_dispatching_SOEpSOEc)
  ROE_created_VLs = __builtin__.property(_get_ROE_created_VLs)
  ROE_retrieve_RL_resources = __builtin__.property(_get_ROE_retrieve_RL_resources)
  ROE_parsing_NSDs = __builtin__.property(_get_ROE_parsing_NSDs)
  ROE_updating_DBs = __builtin__.property(_get_ROE_updating_DBs)
  ROE_extract_VLs = __builtin__.property(_get_ROE_extract_VLs)
  Retrieving_descriptor_from_catalogue_DBs = __builtin__.property(_get_Retrieving_descriptor_from_catalogue_DBs)
  PA_calculation = __builtin__.property(_get_PA_calculation)
  Create_threshold_based_alerts = __builtin__.property(_get_Create_threshold_based_alerts)
  Create_monitoring_jobs = __builtin__.property(_get_Create_monitoring_jobs)
  Create_AIML_alerts = __builtin__.property(_get_Create_AIML_alerts)
  CoreMANO_Wrapper_time = __builtin__.property(_get_CoreMANO_Wrapper_time)


  _pyangbind_elements = OrderedDict([('Current_time', Current_time), ('Operation', Operation), ('NS_ID', NS_ID), ('NSD_ID', NSD_ID), ('Total_instantiation_time', Total_instantiation_time), ('SOE_time', SOE_time), ('ROE_time', ROE_time), ('Operation_ID_for_instantiation_op', Operation_ID_for_instantiation_op), ('Hierarchical_SOE_dispatching_SOEpSOEc', Hierarchical_SOE_dispatching_SOEpSOEc), ('ROE_created_VLs', ROE_created_VLs), ('ROE_retrieve_RL_resources', ROE_retrieve_RL_resources), ('ROE_parsing_NSDs', ROE_parsing_NSDs), ('ROE_updating_DBs', ROE_updating_DBs), ('ROE_extract_VLs', ROE_extract_VLs), ('Retrieving_descriptor_from_catalogue_DBs', Retrieving_descriptor_from_catalogue_DBs), ('PA_calculation', PA_calculation), ('Create_threshold_based_alerts', Create_threshold_based_alerts), ('Create_monitoring_jobs', Create_monitoring_jobs), ('Create_AIML_alerts', Create_AIML_alerts), ('CoreMANO_Wrapper_time', CoreMANO_Wrapper_time), ])


class logparser_instantiation_operation(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module logparser-instantiation-operation - based on the path /logparser-instantiation-operation. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: YANG module to represent the time-related metrics provided by the 5Growth Service Orchestrator (5Gr-SO) Log Management Tool during the network service instantiation operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__so_instantiation_metrics',)

  _yang_name = 'logparser-instantiation-operation'
  _yang_namespace = 'http://data-aggregator.com/ns/so-log-parser/instantiation-op'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__so_instantiation_metrics = YANGDynClass(base=yc_so_instantiation_metrics_logparser_instantiation_operation__so_instantiation_metrics, is_container='container', yang_name="so-instantiation-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_so_instantiation_metrics(self):
    """
    Getter method for so_instantiation_metrics, mapped from YANG variable /so_instantiation_metrics (container)

    YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service instantiation operation.
    """
    return self.__so_instantiation_metrics
      
  def _set_so_instantiation_metrics(self, v, load=False):
    """
    Setter method for so_instantiation_metrics, mapped from YANG variable /so_instantiation_metrics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_so_instantiation_metrics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_so_instantiation_metrics() directly.

    YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service instantiation operation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_so_instantiation_metrics_logparser_instantiation_operation__so_instantiation_metrics, is_container='container', yang_name="so-instantiation-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """so_instantiation_metrics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_so_instantiation_metrics_logparser_instantiation_operation__so_instantiation_metrics, is_container='container', yang_name="so-instantiation-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='container', is_config=True)""",
        })

    self.__so_instantiation_metrics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_so_instantiation_metrics(self):
    self.__so_instantiation_metrics = YANGDynClass(base=yc_so_instantiation_metrics_logparser_instantiation_operation__so_instantiation_metrics, is_container='container', yang_name="so-instantiation-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/instantiation-op', defining_module='logparser-instantiation-operation', yang_type='container', is_config=True)

  so_instantiation_metrics = __builtin__.property(_get_so_instantiation_metrics, _set_so_instantiation_metrics)


  _pyangbind_elements = OrderedDict([('so_instantiation_metrics', so_instantiation_metrics), ])


