# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_so_termination_metrics_logparser_termination_operation__so_termination_metrics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module logparser-termination-operation - based on the path /so-termination-metrics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service termination operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__current_time','__operation','__nsID','__nsdID','__total_termination_time','__SOE_time','__ROE_time','__operation_ID_for_termination_op_datetime_difference','__hierarchical_SOE_dispatching_datetime_difference','__ROE_deleting_LLs_stop_datetime_difference','__ROE_updating_DBs_stop_datetime_difference','__terminating_threshold_based_alerts_stop_datetime_difference','__terminating_monitoring_jobs_stop_datetime_difference','__terminating_AIML_jobs_stop_datetime_difference','__CoreMANO_wrapper_time',)

  _yang_name = 'so-termination-metrics'
  _yang_namespace = 'http://data-aggregator.com/ns/so-log-parser/termination-op'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__current_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='ietf-types:date-and-time', is_config=False)
    self.__operation = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    self.__nsID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    self.__nsdID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsdID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    self.__total_termination_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="total_termination_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__SOE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__ROE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__operation_ID_for_termination_op_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="operation_ID_for_termination_op_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__hierarchical_SOE_dispatching_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="hierarchical_SOE_dispatching_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__ROE_deleting_LLs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_deleting_LLs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__ROE_updating_DBs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__terminating_threshold_based_alerts_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_threshold_based_alerts_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__terminating_monitoring_jobs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_monitoring_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__terminating_AIML_jobs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_AIML_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    self.__CoreMANO_wrapper_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['so-termination-metrics']

  def _get_current_time(self):
    """
    Getter method for current_time, mapped from YANG variable /so_termination_metrics/current_time (ietf-types:date-and-time)

    YANG Description: Date and time in which the time-related metric values have been sent to Kafka (following the ISO 8601 format).
    """
    return self.__current_time
      
  def _set_current_time(self, v, load=False):
    """
    Setter method for current_time, mapped from YANG variable /so_termination_metrics/current_time (ietf-types:date-and-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_time() directly.

    YANG Description: Date and time in which the time-related metric values have been sent to Kafka (following the ISO 8601 format).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='ietf-types:date-and-time', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_time must be of a type compatible with ietf-types:date-and-time""",
          'defined-type': "ietf-types:date-and-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='ietf-types:date-and-time', is_config=False)""",
        })

    self.__current_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_time(self):
    self.__current_time = YANGDynClass(base=RestrictedClassType(base_type=six.text_type, restriction_dict={'pattern': '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})'}), is_leaf=True, yang_name="current_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='ietf-types:date-and-time', is_config=False)


  def _get_operation(self):
    """
    Getter method for operation, mapped from YANG variable /so_termination_metrics/operation (string)

    YANG Description: Identifier of the type of operation (i.e., termination).
    """
    return self.__operation
      
  def _set_operation(self, v, load=False):
    """
    Setter method for operation, mapped from YANG variable /so_termination_metrics/operation (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation() directly.

    YANG Description: Identifier of the type of operation (i.e., termination).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)""",
        })

    self.__operation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation(self):
    self.__operation = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)


  def _get_nsID(self):
    """
    Getter method for nsID, mapped from YANG variable /so_termination_metrics/nsID (string)

    YANG Description: Network Service Identifier.
    """
    return self.__nsID
      
  def _set_nsID(self, v, load=False):
    """
    Setter method for nsID, mapped from YANG variable /so_termination_metrics/nsID (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsID() directly.

    YANG Description: Network Service Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsID must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)""",
        })

    self.__nsID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsID(self):
    self.__nsID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)


  def _get_nsdID(self):
    """
    Getter method for nsdID, mapped from YANG variable /so_termination_metrics/nsdID (string)

    YANG Description: Network Service Descriptor Identifier.
    """
    return self.__nsdID
      
  def _set_nsdID(self, v, load=False):
    """
    Setter method for nsdID, mapped from YANG variable /so_termination_metrics/nsdID (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsdID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsdID() directly.

    YANG Description: Network Service Descriptor Identifier.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="nsdID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsdID must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsdID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)""",
        })

    self.__nsdID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsdID(self):
    self.__nsdID = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="nsdID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='string', is_config=False)


  def _get_total_termination_time(self):
    """
    Getter method for total_termination_time, mapped from YANG variable /so_termination_metrics/total_termination_time (int64)

    YANG Description: Network service total termination time. The time it takes to the 5Gr-SO to perform the termination operation since the request arrives to the Northbound Interface (NBI).
    """
    return self.__total_termination_time
      
  def _set_total_termination_time(self, v, load=False):
    """
    Setter method for total_termination_time, mapped from YANG variable /so_termination_metrics/total_termination_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_termination_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_termination_time() directly.

    YANG Description: Network service total termination time. The time it takes to the 5Gr-SO to perform the termination operation since the request arrives to the Northbound Interface (NBI).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="total_termination_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_termination_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="total_termination_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__total_termination_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_termination_time(self):
    self.__total_termination_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="total_termination_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_SOE_time(self):
    """
    Getter method for SOE_time, mapped from YANG variable /so_termination_metrics/SOE_time (int64)

    YANG Description: Time spent in the Service Orchestration Engine (SOE) module (both at SOE parent, SOE child sub-modules) during the termination process.
    """
    return self.__SOE_time
      
  def _set_SOE_time(self, v, load=False):
    """
    Setter method for SOE_time, mapped from YANG variable /so_termination_metrics/SOE_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_SOE_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_SOE_time() directly.

    YANG Description: Time spent in the Service Orchestration Engine (SOE) module (both at SOE parent, SOE child sub-modules) during the termination process.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """SOE_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__SOE_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_SOE_time(self):
    self.__SOE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="SOE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_ROE_time(self):
    """
    Getter method for ROE_time, mapped from YANG variable /so_termination_metrics/ROE_time (int64)

    YANG Description: Time spent in the Resource Orchestration Engine (ROE) module during the termination process.
    """
    return self.__ROE_time
      
  def _set_ROE_time(self, v, load=False):
    """
    Setter method for ROE_time, mapped from YANG variable /so_termination_metrics/ROE_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_time() directly.

    YANG Description: Time spent in the Resource Orchestration Engine (ROE) module during the termination process.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_time(self):
    self.__ROE_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_operation_ID_for_termination_op_datetime_difference(self):
    """
    Getter method for operation_ID_for_termination_op_datetime_difference, mapped from YANG variable /so_termination_metrics/operation_ID_for_termination_op_datetime_difference (int64)

    YANG Description: The time it takes the Northbound Interface (NBI) to generate an ID to identify the termination operation.
    """
    return self.__operation_ID_for_termination_op_datetime_difference
      
  def _set_operation_ID_for_termination_op_datetime_difference(self, v, load=False):
    """
    Setter method for operation_ID_for_termination_op_datetime_difference, mapped from YANG variable /so_termination_metrics/operation_ID_for_termination_op_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operation_ID_for_termination_op_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operation_ID_for_termination_op_datetime_difference() directly.

    YANG Description: The time it takes the Northbound Interface (NBI) to generate an ID to identify the termination operation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="operation_ID_for_termination_op_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operation_ID_for_termination_op_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="operation_ID_for_termination_op_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__operation_ID_for_termination_op_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operation_ID_for_termination_op_datetime_difference(self):
    self.__operation_ID_for_termination_op_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="operation_ID_for_termination_op_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_hierarchical_SOE_dispatching_datetime_difference(self):
    """
    Getter method for hierarchical_SOE_dispatching_datetime_difference, mapped from YANG variable /so_termination_metrics/hierarchical_SOE_dispatching_datetime_difference (int64)

    YANG Description: The time the hierarchical Service Orchestration Engine (SOE) uses to select the appropriate termination process based on the nature of the service (single NS, composite NS).
    """
    return self.__hierarchical_SOE_dispatching_datetime_difference
      
  def _set_hierarchical_SOE_dispatching_datetime_difference(self, v, load=False):
    """
    Setter method for hierarchical_SOE_dispatching_datetime_difference, mapped from YANG variable /so_termination_metrics/hierarchical_SOE_dispatching_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hierarchical_SOE_dispatching_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hierarchical_SOE_dispatching_datetime_difference() directly.

    YANG Description: The time the hierarchical Service Orchestration Engine (SOE) uses to select the appropriate termination process based on the nature of the service (single NS, composite NS).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="hierarchical_SOE_dispatching_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hierarchical_SOE_dispatching_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="hierarchical_SOE_dispatching_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__hierarchical_SOE_dispatching_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hierarchical_SOE_dispatching_datetime_difference(self):
    self.__hierarchical_SOE_dispatching_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="hierarchical_SOE_dispatching_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_ROE_deleting_LLs_stop_datetime_difference(self):
    """
    Getter method for ROE_deleting_LLs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/ROE_deleting_LLs_stop_datetime_difference (int64)

    YANG Description: Time in the Resource Orchestration Engine (ROE) to interact with the Resource Layer (RL) to deallocate resources in the logical links (LLs) serving the virtual link (VL) connections between VNFs deployed in multiple Virtualized Infrastructure Managers (VIMs).
    """
    return self.__ROE_deleting_LLs_stop_datetime_difference
      
  def _set_ROE_deleting_LLs_stop_datetime_difference(self, v, load=False):
    """
    Setter method for ROE_deleting_LLs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/ROE_deleting_LLs_stop_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_deleting_LLs_stop_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_deleting_LLs_stop_datetime_difference() directly.

    YANG Description: Time in the Resource Orchestration Engine (ROE) to interact with the Resource Layer (RL) to deallocate resources in the logical links (LLs) serving the virtual link (VL) connections between VNFs deployed in multiple Virtualized Infrastructure Managers (VIMs).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_deleting_LLs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_deleting_LLs_stop_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_deleting_LLs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_deleting_LLs_stop_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_deleting_LLs_stop_datetime_difference(self):
    self.__ROE_deleting_LLs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_deleting_LLs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_ROE_updating_DBs_stop_datetime_difference(self):
    """
    Getter method for ROE_updating_DBs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/ROE_updating_DBs_stop_datetime_difference (int64)

    YANG Description: Time to update databases (DBs) to declare the network service as operative and the termination operation as successful.
    """
    return self.__ROE_updating_DBs_stop_datetime_difference
      
  def _set_ROE_updating_DBs_stop_datetime_difference(self, v, load=False):
    """
    Setter method for ROE_updating_DBs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/ROE_updating_DBs_stop_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ROE_updating_DBs_stop_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ROE_updating_DBs_stop_datetime_difference() directly.

    YANG Description: Time to update databases (DBs) to declare the network service as operative and the termination operation as successful.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ROE_updating_DBs_stop_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__ROE_updating_DBs_stop_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ROE_updating_DBs_stop_datetime_difference(self):
    self.__ROE_updating_DBs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="ROE_updating_DBs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_terminating_threshold_based_alerts_stop_datetime_difference(self):
    """
    Getter method for terminating_threshold_based_alerts_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_threshold_based_alerts_stop_datetime_difference (int64)

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and SLA Manager to remove alert-based objects in case they have been configured in the 5Gr-VoMS.
    """
    return self.__terminating_threshold_based_alerts_stop_datetime_difference
      
  def _set_terminating_threshold_based_alerts_stop_datetime_difference(self, v, load=False):
    """
    Setter method for terminating_threshold_based_alerts_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_threshold_based_alerts_stop_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_terminating_threshold_based_alerts_stop_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_terminating_threshold_based_alerts_stop_datetime_difference() directly.

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and SLA Manager to remove alert-based objects in case they have been configured in the 5Gr-VoMS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_threshold_based_alerts_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """terminating_threshold_based_alerts_stop_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_threshold_based_alerts_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__terminating_threshold_based_alerts_stop_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_terminating_threshold_based_alerts_stop_datetime_difference(self):
    self.__terminating_threshold_based_alerts_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_threshold_based_alerts_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_terminating_monitoring_jobs_stop_datetime_difference(self):
    """
    Getter method for terminating_monitoring_jobs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_monitoring_jobs_stop_datetime_difference (int64)

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and Monitoring Manager to remove alert-based objects in case they have been configured in the
5Gr-VoMS.
    """
    return self.__terminating_monitoring_jobs_stop_datetime_difference
      
  def _set_terminating_monitoring_jobs_stop_datetime_difference(self, v, load=False):
    """
    Setter method for terminating_monitoring_jobs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_monitoring_jobs_stop_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_terminating_monitoring_jobs_stop_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_terminating_monitoring_jobs_stop_datetime_difference() directly.

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and Monitoring Manager to remove alert-based objects in case they have been configured in the
5Gr-VoMS.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_monitoring_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """terminating_monitoring_jobs_stop_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_monitoring_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__terminating_monitoring_jobs_stop_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_terminating_monitoring_jobs_stop_datetime_difference(self):
    self.__terminating_monitoring_jobs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_monitoring_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_terminating_AIML_jobs_stop_datetime_difference(self):
    """
    Getter method for terminating_AIML_jobs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_AIML_jobs_stop_datetime_difference (int64)

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and SLA Manager to remove data engineering pipeline elements (Kafka topic, Spark job) in case
they have been configured in the 5Gr-VoMs and the Inference Platform (Apache Spark).
    """
    return self.__terminating_AIML_jobs_stop_datetime_difference
      
  def _set_terminating_AIML_jobs_stop_datetime_difference(self, v, load=False):
    """
    Setter method for terminating_AIML_jobs_stop_datetime_difference, mapped from YANG variable /so_termination_metrics/terminating_AIML_jobs_stop_datetime_difference (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_terminating_AIML_jobs_stop_datetime_difference is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_terminating_AIML_jobs_stop_datetime_difference() directly.

    YANG Description: The time required in the interaction between Service Orchestration Engine (SOE) and SLA Manager to remove data engineering pipeline elements (Kafka topic, Spark job) in case
they have been configured in the 5Gr-VoMs and the Inference Platform (Apache Spark).
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_AIML_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """terminating_AIML_jobs_stop_datetime_difference must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_AIML_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__terminating_AIML_jobs_stop_datetime_difference = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_terminating_AIML_jobs_stop_datetime_difference(self):
    self.__terminating_AIML_jobs_stop_datetime_difference = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="terminating_AIML_jobs_stop_datetime_difference", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)


  def _get_CoreMANO_wrapper_time(self):
    """
    Getter method for CoreMANO_wrapper_time, mapped from YANG variable /so_termination_metrics/CoreMANO_wrapper_time (int64)

    YANG Description: Time spent in the Core MANO Wrapper module during the termination process to delete virtual network supporting the vitual links (VLs) and the VMs supporting the VNFs.
    """
    return self.__CoreMANO_wrapper_time
      
  def _set_CoreMANO_wrapper_time(self, v, load=False):
    """
    Setter method for CoreMANO_wrapper_time, mapped from YANG variable /so_termination_metrics/CoreMANO_wrapper_time (int64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_CoreMANO_wrapper_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_CoreMANO_wrapper_time() directly.

    YANG Description: Time spent in the Core MANO Wrapper module during the termination process to delete virtual network supporting the vitual links (VLs) and the VMs supporting the VNFs.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """CoreMANO_wrapper_time must be of a type compatible with int64""",
          'defined-type': "int64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)""",
        })

    self.__CoreMANO_wrapper_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_CoreMANO_wrapper_time(self):
    self.__CoreMANO_wrapper_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-9223372036854775808..9223372036854775807']}, int_size=64), is_leaf=True, yang_name="CoreMANO_wrapper_time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='int64', is_config=False)

  current_time = __builtin__.property(_get_current_time)
  operation = __builtin__.property(_get_operation)
  nsID = __builtin__.property(_get_nsID)
  nsdID = __builtin__.property(_get_nsdID)
  total_termination_time = __builtin__.property(_get_total_termination_time)
  SOE_time = __builtin__.property(_get_SOE_time)
  ROE_time = __builtin__.property(_get_ROE_time)
  operation_ID_for_termination_op_datetime_difference = __builtin__.property(_get_operation_ID_for_termination_op_datetime_difference)
  hierarchical_SOE_dispatching_datetime_difference = __builtin__.property(_get_hierarchical_SOE_dispatching_datetime_difference)
  ROE_deleting_LLs_stop_datetime_difference = __builtin__.property(_get_ROE_deleting_LLs_stop_datetime_difference)
  ROE_updating_DBs_stop_datetime_difference = __builtin__.property(_get_ROE_updating_DBs_stop_datetime_difference)
  terminating_threshold_based_alerts_stop_datetime_difference = __builtin__.property(_get_terminating_threshold_based_alerts_stop_datetime_difference)
  terminating_monitoring_jobs_stop_datetime_difference = __builtin__.property(_get_terminating_monitoring_jobs_stop_datetime_difference)
  terminating_AIML_jobs_stop_datetime_difference = __builtin__.property(_get_terminating_AIML_jobs_stop_datetime_difference)
  CoreMANO_wrapper_time = __builtin__.property(_get_CoreMANO_wrapper_time)


  _pyangbind_elements = OrderedDict([('current_time', current_time), ('operation', operation), ('nsID', nsID), ('nsdID', nsdID), ('total_termination_time', total_termination_time), ('SOE_time', SOE_time), ('ROE_time', ROE_time), ('operation_ID_for_termination_op_datetime_difference', operation_ID_for_termination_op_datetime_difference), ('hierarchical_SOE_dispatching_datetime_difference', hierarchical_SOE_dispatching_datetime_difference), ('ROE_deleting_LLs_stop_datetime_difference', ROE_deleting_LLs_stop_datetime_difference), ('ROE_updating_DBs_stop_datetime_difference', ROE_updating_DBs_stop_datetime_difference), ('terminating_threshold_based_alerts_stop_datetime_difference', terminating_threshold_based_alerts_stop_datetime_difference), ('terminating_monitoring_jobs_stop_datetime_difference', terminating_monitoring_jobs_stop_datetime_difference), ('terminating_AIML_jobs_stop_datetime_difference', terminating_AIML_jobs_stop_datetime_difference), ('CoreMANO_wrapper_time', CoreMANO_wrapper_time), ])


class logparser_termination_operation(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module logparser-termination-operation - based on the path /logparser-termination-operation. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: YANG module to represent the time-related metrics provided by the 5Growth Service Orchestrator (5Gr-SO) Log Management Tool during the network service termination operation.
  """
  __slots__ = ('_path_helper', '_extmethods', '__so_termination_metrics',)

  _yang_name = 'logparser-termination-operation'
  _yang_namespace = 'http://data-aggregator.com/ns/so-log-parser/termination-op'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__so_termination_metrics = YANGDynClass(base=yc_so_termination_metrics_logparser_termination_operation__so_termination_metrics, is_container='container', yang_name="so-termination-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_so_termination_metrics(self):
    """
    Getter method for so_termination_metrics, mapped from YANG variable /so_termination_metrics (container)

    YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service termination operation.
    """
    return self.__so_termination_metrics
      
  def _set_so_termination_metrics(self, v, load=False):
    """
    Setter method for so_termination_metrics, mapped from YANG variable /so_termination_metrics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_so_termination_metrics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_so_termination_metrics() directly.

    YANG Description: Enclosing container for the time-related metrics provided by the 5Growth Service Orchestrator related logs during the network service termination operation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_so_termination_metrics_logparser_termination_operation__so_termination_metrics, is_container='container', yang_name="so-termination-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """so_termination_metrics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_so_termination_metrics_logparser_termination_operation__so_termination_metrics, is_container='container', yang_name="so-termination-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='container', is_config=True)""",
        })

    self.__so_termination_metrics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_so_termination_metrics(self):
    self.__so_termination_metrics = YANGDynClass(base=yc_so_termination_metrics_logparser_termination_operation__so_termination_metrics, is_container='container', yang_name="so-termination-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/so-log-parser/termination-op', defining_module='logparser-termination-operation', yang_type='container', is_config=True)

  so_termination_metrics = __builtin__.property(_get_so_termination_metrics, _set_so_termination_metrics)


  _pyangbind_elements = OrderedDict([('so_termination_metrics', so_termination_metrics), ])


