# -*- coding: utf-8 -*-
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType
from pyangbind.lib.yangtypes import RestrictedClassType
from pyangbind.lib.yangtypes import TypedListType
from pyangbind.lib.yangtypes import YANGBool
from pyangbind.lib.yangtypes import YANGListType
from pyangbind.lib.yangtypes import YANGDynClass
from pyangbind.lib.yangtypes import ReferenceType
from pyangbind.lib.base import PybindBase
from collections import OrderedDict
from decimal import Decimal
from bitarray import bitarray
import six

# PY3 support of some PY2 keywords (needs improved)
if six.PY3:
  import builtins as __builtin__
  long = int
elif six.PY2:
  import __builtin__

class yc_value_gnmi__gnmi_event_values_value(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi-event/values/value. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A name-value pair.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__value',)

  _yang_name = 'value'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['gnmi-event', 'values', 'value']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /gnmi_event/values/value/name (string)

    YANG Description: Key of the value.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /gnmi_event/values/value/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Key of the value.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /gnmi_event/values/value/value (string)

    YANG Description: Value of the value's key.
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /gnmi_event/values/value/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: Value of the value's key.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  value = __builtin__.property(_get_value, _set_value)


  _pyangbind_elements = OrderedDict([('name', name), ('value', value), ])


class yc_values_gnmi__gnmi_event_values(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi-event/values. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of values
associated with an event.
  """
  __slots__ = ('_path_helper', '_extmethods', '__value',)

  _yang_name = 'values'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__value = YANGDynClass(base=YANGListType("name",yc_value_gnmi__gnmi_event_values_value, yang_name="value", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['gnmi-event', 'values']

  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /gnmi_event/values/value (list)

    YANG Description: A name-value pair.
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /gnmi_event/values/value (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: A name-value pair.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_value_gnmi__gnmi_event_values_value, yang_name="value", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_value_gnmi__gnmi_event_values_value, yang_name="value", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=YANGListType("name",yc_value_gnmi__gnmi_event_values_value, yang_name="value", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)

  value = __builtin__.property(_get_value, _set_value)


  _pyangbind_elements = OrderedDict([('value', value), ])


class yc_tag_gnmi__gnmi_event_tags_tag(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi-event/tags/tag. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A name-value pair.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__value',)

  _yang_name = 'tag'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['gnmi-event', 'tags', 'tag']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /gnmi_event/tags/tag/name (string)

    YANG Description: Key of the tag.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /gnmi_event/tags/tag/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Key of the tag.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)


  def _get_value(self):
    """
    Getter method for value, mapped from YANG variable /gnmi_event/tags/tag/value (string)

    YANG Description: Value of the tag's key.
    """
    return self.__value
      
  def _set_value(self, v, load=False):
    """
    Setter method for value, mapped from YANG variable /gnmi_event/tags/tag/value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_value() directly.

    YANG Description: Value of the tag's key.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)""",
        })

    self.__value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_value(self):
    self.__value = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  value = __builtin__.property(_get_value, _set_value)


  _pyangbind_elements = OrderedDict([('name', name), ('value', value), ])


class yc_tags_gnmi__gnmi_event_tags(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi-event/tags. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for the list of tags
associated with an event.
  """
  __slots__ = ('_path_helper', '_extmethods', '__tag',)

  _yang_name = 'tags'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__tag = YANGDynClass(base=YANGListType("name",yc_tag_gnmi__gnmi_event_tags_tag, yang_name="tag", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['gnmi-event', 'tags']

  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /gnmi_event/tags/tag (list)

    YANG Description: A name-value pair.
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /gnmi_event/tags/tag (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.

    YANG Description: A name-value pair.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",yc_tag_gnmi__gnmi_event_tags_tag, yang_name="tag", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",yc_tag_gnmi__gnmi_event_tags_tag, yang_name="tag", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=YANGListType("name",yc_tag_gnmi__gnmi_event_tags_tag, yang_name="tag", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions=None), is_container='list', yang_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='list', is_config=True)

  tag = __builtin__.property(_get_tag, _set_tag)


  _pyangbind_elements = OrderedDict([('tag', tag), ])


class yc_gnmi_event_gnmi__gnmi_event(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi-event. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Enclosing container for a sample telemetry data event collected by the gNMI client through Subscribe RPC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__name','__timestamp','__values','__tags',)

  _yang_name = 'gnmi-event'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    self.__timestamp = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=3), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='decimal64', is_config=True)
    self.__values = YANGDynClass(base=yc_values_gnmi__gnmi_event_values, is_container='container', yang_name="values", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)
    self.__tags = YANGDynClass(base=yc_tags_gnmi__gnmi_event_tags, is_container='container', yang_name="tags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return ['gnmi-event']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /gnmi_event/name (string)

    YANG Description: Name of the gNMI subscription.
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /gnmi_event/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Name of the gNMI subscription.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=six.text_type, is_leaf=True, yang_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='string', is_config=True)


  def _get_timestamp(self):
    """
    Getter method for timestamp, mapped from YANG variable /gnmi_event/timestamp (decimal64)

    YANG Description: The measurement timestamp of the event's sample.
    """
    return self.__timestamp
      
  def _set_timestamp(self, v, load=False):
    """
    Setter method for timestamp, mapped from YANG variable /gnmi_event/timestamp (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timestamp() directly.

    YANG Description: The measurement timestamp of the event's sample.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=3), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='decimal64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timestamp must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=3), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='decimal64', is_config=True)""",
        })

    self.__timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timestamp(self):
    self.__timestamp = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=3), is_leaf=True, yang_name="timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='decimal64', is_config=True)


  def _get_values(self):
    """
    Getter method for values, mapped from YANG variable /gnmi_event/values (container)

    YANG Description: Enclosing container for the list of values
associated with an event.
    """
    return self.__values
      
  def _set_values(self, v, load=False):
    """
    Setter method for values, mapped from YANG variable /gnmi_event/values (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_values is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_values() directly.

    YANG Description: Enclosing container for the list of values
associated with an event.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_values_gnmi__gnmi_event_values, is_container='container', yang_name="values", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """values must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_values_gnmi__gnmi_event_values, is_container='container', yang_name="values", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)""",
        })

    self.__values = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_values(self):
    self.__values = YANGDynClass(base=yc_values_gnmi__gnmi_event_values, is_container='container', yang_name="values", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)


  def _get_tags(self):
    """
    Getter method for tags, mapped from YANG variable /gnmi_event/tags (container)

    YANG Description: Enclosing container for the list of tags
associated with an event.
    """
    return self.__tags
      
  def _set_tags(self, v, load=False):
    """
    Setter method for tags, mapped from YANG variable /gnmi_event/tags (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tags() directly.

    YANG Description: Enclosing container for the list of tags
associated with an event.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_tags_gnmi__gnmi_event_tags, is_container='container', yang_name="tags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tags must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_tags_gnmi__gnmi_event_tags, is_container='container', yang_name="tags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)""",
        })

    self.__tags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tags(self):
    self.__tags = YANGDynClass(base=yc_tags_gnmi__gnmi_event_tags, is_container='container', yang_name="tags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)

  name = __builtin__.property(_get_name, _set_name)
  timestamp = __builtin__.property(_get_timestamp, _set_timestamp)
  values = __builtin__.property(_get_values, _set_values)
  tags = __builtin__.property(_get_tags, _set_tags)


  _pyangbind_elements = OrderedDict([('name', name), ('timestamp', timestamp), ('values', values), ('tags', tags), ])


class gnmi(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module gnmi - based on the path /gnmi. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: YANG module to represent the event output format for telemetry data collected from a gNMI client (e.g., gNMIc) through Subscribe RPC.
  """
  __slots__ = ('_path_helper', '_extmethods', '__gnmi_event',)

  _yang_name = 'gnmi'
  _yang_namespace = 'http://data-aggregator.com/ns/gnmi'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    helper = kwargs.pop("path_helper", None)
    if helper is False:
      self._path_helper = False
    elif helper is not None and isinstance(helper, xpathhelper.YANGPathHelper):
      self._path_helper = helper
    elif hasattr(self, "_parent"):
      helper = getattr(self._parent, "_path_helper", False)
      self._path_helper = helper
    else:
      self._path_helper = False

    self._extmethods = False
    self.__gnmi_event = YANGDynClass(base=yc_gnmi_event_gnmi__gnmi_event, is_container='container', yang_name="gnmi-event", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return []

  def _get_gnmi_event(self):
    """
    Getter method for gnmi_event, mapped from YANG variable /gnmi_event (container)

    YANG Description: Enclosing container for a sample telemetry data event collected by the gNMI client through Subscribe RPC.
    """
    return self.__gnmi_event
      
  def _set_gnmi_event(self, v, load=False):
    """
    Setter method for gnmi_event, mapped from YANG variable /gnmi_event (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gnmi_event is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gnmi_event() directly.

    YANG Description: Enclosing container for a sample telemetry data event collected by the gNMI client through Subscribe RPC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=yc_gnmi_event_gnmi__gnmi_event, is_container='container', yang_name="gnmi-event", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gnmi_event must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=yc_gnmi_event_gnmi__gnmi_event, is_container='container', yang_name="gnmi-event", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)""",
        })

    self.__gnmi_event = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gnmi_event(self):
    self.__gnmi_event = YANGDynClass(base=yc_gnmi_event_gnmi__gnmi_event, is_container='container', yang_name="gnmi-event", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://data-aggregator.com/ns/gnmi', defining_module='gnmi', yang_type='container', is_config=True)

  gnmi_event = __builtin__.property(_get_gnmi_event, _set_gnmi_event)


  _pyangbind_elements = OrderedDict([('gnmi_event', gnmi_event), ])


