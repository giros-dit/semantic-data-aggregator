// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flow.proto

package flowpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FlowMessage_FlowType int32

const (
	FlowMessage_FLOWUNKNOWN FlowMessage_FlowType = 0
	FlowMessage_SFLOW_5     FlowMessage_FlowType = 1
	FlowMessage_NETFLOW_V5  FlowMessage_FlowType = 2
	FlowMessage_NETFLOW_V9  FlowMessage_FlowType = 3
	FlowMessage_IPFIX       FlowMessage_FlowType = 4
)

var FlowMessage_FlowType_name = map[int32]string{
	0: "FLOWUNKNOWN",
	1: "SFLOW_5",
	2: "NETFLOW_V5",
	3: "NETFLOW_V9",
	4: "IPFIX",
}

var FlowMessage_FlowType_value = map[string]int32{
	"FLOWUNKNOWN": 0,
	"SFLOW_5":     1,
	"NETFLOW_V5":  2,
	"NETFLOW_V9":  3,
	"IPFIX":       4,
}

func (x FlowMessage_FlowType) String() string {
	return proto.EnumName(FlowMessage_FlowType_name, int32(x))
}

func (FlowMessage_FlowType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0, 0}
}

type FlowMessage struct {
	Type         FlowMessage_FlowType `protobuf:"varint,1,opt,name=Type,proto3,enum=flowpb.FlowMessage_FlowType" json:"Type,omitempty"`
	TimeReceived uint64               `protobuf:"varint,2,opt,name=TimeReceived,proto3" json:"TimeReceived,omitempty"`
	// Sampler information
	SamplerAddress []byte `protobuf:"bytes,3,opt,name=SamplerAddress,proto3" json:"SamplerAddress,omitempty"`
	SamplingRate   uint32 `protobuf:"varint,4,opt,name=SamplingRate,proto3" json:"SamplingRate,omitempty"`
	// Found inside header
	SequenceNum  uint32 `protobuf:"varint,5,opt,name=SequenceNum,proto3" json:"SequenceNum,omitempty"`
	Count        uint32 `protobuf:"varint,6,opt,name=Count,proto3" json:"Count,omitempty"`
	SystemUptime uint32 `protobuf:"varint,7,opt,name=SystemUptime,proto3" json:"SystemUptime,omitempty"`
	UnixSeconds  uint32 `protobuf:"varint,8,opt,name=UnixSeconds,proto3" json:"UnixSeconds,omitempty"`
	SourceId     uint32 `protobuf:"varint,9,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	// Found inside each data record
	// Flows
	FlowDirection uint32 `protobuf:"varint,10,opt,name=FlowDirection,proto3" json:"FlowDirection,omitempty"`
	// Time
	TimeFlowStart uint64 `protobuf:"varint,11,opt,name=TimeFlowStart,proto3" json:"TimeFlowStart,omitempty"`
	TimeFlowEnd   uint64 `protobuf:"varint,12,opt,name=TimeFlowEnd,proto3" json:"TimeFlowEnd,omitempty"`
	// Size of the sampled packet
	BytesIn    uint64 `protobuf:"varint,13,opt,name=BytesIn,proto3" json:"BytesIn,omitempty"`
	PacketsIn  uint64 `protobuf:"varint,14,opt,name=PacketsIn,proto3" json:"PacketsIn,omitempty"`
	BytesOut   uint64 `protobuf:"varint,15,opt,name=BytesOut,proto3" json:"BytesOut,omitempty"`
	PacketsOut uint64 `protobuf:"varint,16,opt,name=PacketsOut,proto3" json:"PacketsOut,omitempty"`
	// Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)
	Etype uint32 `protobuf:"varint,17,opt,name=Etype,proto3" json:"Etype,omitempty"`
	// Layer 4 protocol
	Proto uint32 `protobuf:"varint,18,opt,name=Proto,proto3" json:"Proto,omitempty"`
	// Source/destination addresses
	SrcAddr []byte `protobuf:"bytes,19,opt,name=SrcAddr,proto3" json:"SrcAddr,omitempty"`
	DstAddr []byte `protobuf:"bytes,20,opt,name=DstAddr,proto3" json:"DstAddr,omitempty"`
	NextHop []byte `protobuf:"bytes,21,opt,name=NextHop,proto3" json:"NextHop,omitempty"`
	// Ports for UDP and TCP
	SrcPort uint32 `protobuf:"varint,22,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort uint32 `protobuf:"varint,23,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	// Interfaces
	InIf  uint32 `protobuf:"varint,24,opt,name=InIf,proto3" json:"InIf,omitempty"`
	OutIf uint32 `protobuf:"varint,25,opt,name=OutIf,proto3" json:"OutIf,omitempty"`
	// Ethernet information
	SrcMacIn  uint64 `protobuf:"varint,26,opt,name=SrcMacIn,proto3" json:"SrcMacIn,omitempty"`
	DstMacIn  uint64 `protobuf:"varint,27,opt,name=DstMacIn,proto3" json:"DstMacIn,omitempty"`
	SrcMacOut uint64 `protobuf:"varint,28,opt,name=SrcMacOut,proto3" json:"SrcMacOut,omitempty"`
	DstMacOut uint64 `protobuf:"varint,29,opt,name=DstMacOut,proto3" json:"DstMacOut,omitempty"`
	// Vlan
	SrcVlan uint32 `protobuf:"varint,30,opt,name=SrcVlan,proto3" json:"SrcVlan,omitempty"`
	DstVlan uint32 `protobuf:"varint,31,opt,name=DstVlan,proto3" json:"DstVlan,omitempty"`
	// 802.1q VLAN in sampled packet
	VlanId uint32 `protobuf:"varint,32,opt,name=VlanId,proto3" json:"VlanId,omitempty"`
	// IP and TCP special flags
	SrcTos            uint32 `protobuf:"varint,33,opt,name=SrcTos,proto3" json:"SrcTos,omitempty"`
	DstTos            uint32 `protobuf:"varint,34,opt,name=DstTos,proto3" json:"DstTos,omitempty"`
	ForwardingStatus  uint32 `protobuf:"varint,35,opt,name=ForwardingStatus,proto3" json:"ForwardingStatus,omitempty"`
	MinTTL            uint32 `protobuf:"varint,36,opt,name=MinTTL,proto3" json:"MinTTL,omitempty"`
	MaxTTL            uint32 `protobuf:"varint,37,opt,name=MaxTTL,proto3" json:"MaxTTL,omitempty"`
	TCPFlags          uint32 `protobuf:"varint,38,opt,name=TCPFlags,proto3" json:"TCPFlags,omitempty"`
	IcmpType          uint32 `protobuf:"varint,39,opt,name=IcmpType,proto3" json:"IcmpType,omitempty"`
	IcmpCode          uint32 `protobuf:"varint,40,opt,name=IcmpCode,proto3" json:"IcmpCode,omitempty"`
	IPv6FlowLabel     uint32 `protobuf:"varint,41,opt,name=IPv6FlowLabel,proto3" json:"IPv6FlowLabel,omitempty"`
	IPv6OptionHeaders uint32 `protobuf:"varint,42,opt,name=IPv6OptionHeaders,proto3" json:"IPv6OptionHeaders,omitempty"`
	// Fragments (IPv4/IPv6)
	FragmentId      uint32 `protobuf:"varint,43,opt,name=FragmentId,proto3" json:"FragmentId,omitempty"`
	FragmentOffset  uint32 `protobuf:"varint,44,opt,name=FragmentOffset,proto3" json:"FragmentOffset,omitempty"`
	BiFlowDirection uint32 `protobuf:"varint,45,opt,name=BiFlowDirection,proto3" json:"BiFlowDirection,omitempty"`
	// Autonomous system information
	SrcAS      uint32 `protobuf:"varint,46,opt,name=SrcAS,proto3" json:"SrcAS,omitempty"`
	DstAS      uint32 `protobuf:"varint,47,opt,name=DstAS,proto3" json:"DstAS,omitempty"`
	BgpNextHop []byte `protobuf:"bytes,48,opt,name=BgpNextHop,proto3" json:"BgpNextHop,omitempty"`
	// Prefix size
	SrcNet uint32 `protobuf:"varint,49,opt,name=SrcNet,proto3" json:"SrcNet,omitempty"`
	DstNet uint32 `protobuf:"varint,50,opt,name=DstNet,proto3" json:"DstNet,omitempty"`
	// Prefix
	SrcPrefix []byte `protobuf:"bytes,51,opt,name=SrcPrefix,proto3" json:"SrcPrefix,omitempty"`
	DstPrefix []byte `protobuf:"bytes,52,opt,name=DstPrefix,proto3" json:"DstPrefix,omitempty"`
	// MPLS information
	HasMPLS          bool   `protobuf:"varint,53,opt,name=HasMPLS,proto3" json:"HasMPLS,omitempty"`
	MPLSCount        uint32 `protobuf:"varint,54,opt,name=MPLSCount,proto3" json:"MPLSCount,omitempty"`
	MPLSPalRd        uint64 `protobuf:"varint,55,opt,name=MPLSPalRd,proto3" json:"MPLSPalRd,omitempty"`
	MPLSPrefixLen    uint32 `protobuf:"varint,56,opt,name=MPLSPrefixLen,proto3" json:"MPLSPrefixLen,omitempty"`
	MPLSTopLabelType uint32 `protobuf:"varint,57,opt,name=MPLSTopLabelType,proto3" json:"MPLSTopLabelType,omitempty"`
	MPLSTopLabelIP   []byte `protobuf:"bytes,58,opt,name=MPLSTopLabelIP,proto3" json:"MPLSTopLabelIP,omitempty"`
	// MPLS Stack
	MPLS1TTL    uint32 `protobuf:"varint,59,opt,name=MPLS1TTL,proto3" json:"MPLS1TTL,omitempty"`
	MPLS1Label  uint32 `protobuf:"varint,60,opt,name=MPLS1Label,proto3" json:"MPLS1Label,omitempty"`
	MPLS2TTL    uint32 `protobuf:"varint,61,opt,name=MPLS2TTL,proto3" json:"MPLS2TTL,omitempty"`
	MPLS2Label  uint32 `protobuf:"varint,62,opt,name=MPLS2Label,proto3" json:"MPLS2Label,omitempty"`
	MPLS3TTL    uint32 `protobuf:"varint,63,opt,name=MPLS3TTL,proto3" json:"MPLS3TTL,omitempty"`
	MPLS3Label  uint32 `protobuf:"varint,64,opt,name=MPLS3Label,proto3" json:"MPLS3Label,omitempty"`
	MPLS4TTL    uint32 `protobuf:"varint,65,opt,name=MPLS4TTL,proto3" json:"MPLS4TTL,omitempty"`
	MPLS4Label  uint32 `protobuf:"varint,66,opt,name=MPLS4Label,proto3" json:"MPLS4Label,omitempty"`
	MPLS5TTL    uint32 `protobuf:"varint,67,opt,name=MPLS5TTL,proto3" json:"MPLS5TTL,omitempty"`
	MPLS5Label  uint32 `protobuf:"varint,68,opt,name=MPLS5Label,proto3" json:"MPLS5Label,omitempty"`
	MPLS6TTL    uint32 `protobuf:"varint,69,opt,name=MPLS6TTL,proto3" json:"MPLS6TTL,omitempty"`
	MPLS6Label  uint32 `protobuf:"varint,70,opt,name=MPLS6Label,proto3" json:"MPLS6Label,omitempty"`
	MPLS7TTL    uint32 `protobuf:"varint,71,opt,name=MPLS7TTL,proto3" json:"MPLS7TTL,omitempty"`
	MPLS7Label  uint32 `protobuf:"varint,72,opt,name=MPLS7Label,proto3" json:"MPLS7Label,omitempty"`
	MPLS8TTL    uint32 `protobuf:"varint,73,opt,name=MPLS8TTL,proto3" json:"MPLS8TTL,omitempty"`
	MPLS8Label  uint32 `protobuf:"varint,74,opt,name=MPLS8Label,proto3" json:"MPLS8Label,omitempty"`
	MPLS9TTL    uint32 `protobuf:"varint,75,opt,name=MPLS9TTL,proto3" json:"MPLS9TTL,omitempty"`
	MPLS9Label  uint32 `protobuf:"varint,76,opt,name=MPLS9Label,proto3" json:"MPLS9Label,omitempty"`
	MPLS10TTL   uint32 `protobuf:"varint,77,opt,name=MPLS10TTL,proto3" json:"MPLS10TTL,omitempty"`
	MPLS10Label uint32 `protobuf:"varint,78,opt,name=MPLS10Label,proto3" json:"MPLS10Label,omitempty"`
	// Engine information
	EngineType uint32 `protobuf:"varint,79,opt,name=EngineType,proto3" json:"EngineType,omitempty"`
	EngineId   uint32 `protobuf:"varint,80,opt,name=EngineId,proto3" json:"EngineId,omitempty"`
	// Custom allocations
	CustomInteger1       uint64   `protobuf:"varint,1001,opt,name=CustomInteger1,proto3" json:"CustomInteger1,omitempty"`
	CustomInteger2       uint64   `protobuf:"varint,1002,opt,name=CustomInteger2,proto3" json:"CustomInteger2,omitempty"`
	CustomInteger3       uint64   `protobuf:"varint,1003,opt,name=CustomInteger3,proto3" json:"CustomInteger3,omitempty"`
	CustomInteger4       uint64   `protobuf:"varint,1004,opt,name=CustomInteger4,proto3" json:"CustomInteger4,omitempty"`
	CustomInteger5       uint64   `protobuf:"varint,1005,opt,name=CustomInteger5,proto3" json:"CustomInteger5,omitempty"`
	CustomBytes1         []byte   `protobuf:"bytes,1011,opt,name=CustomBytes1,proto3" json:"CustomBytes1,omitempty"`
	CustomBytes2         []byte   `protobuf:"bytes,1012,opt,name=CustomBytes2,proto3" json:"CustomBytes2,omitempty"`
	CustomBytes3         []byte   `protobuf:"bytes,1013,opt,name=CustomBytes3,proto3" json:"CustomBytes3,omitempty"`
	CustomBytes4         []byte   `protobuf:"bytes,1014,opt,name=CustomBytes4,proto3" json:"CustomBytes4,omitempty"`
	CustomBytes5         []byte   `protobuf:"bytes,1015,opt,name=CustomBytes5,proto3" json:"CustomBytes5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowMessage) Reset()         { *m = FlowMessage{} }
func (m *FlowMessage) String() string { return proto.CompactTextString(m) }
func (*FlowMessage) ProtoMessage()    {}
func (*FlowMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb3fc33c49933823, []int{0}
}

func (m *FlowMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowMessage.Unmarshal(m, b)
}
func (m *FlowMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowMessage.Marshal(b, m, deterministic)
}
func (m *FlowMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowMessage.Merge(m, src)
}
func (m *FlowMessage) XXX_Size() int {
	return xxx_messageInfo_FlowMessage.Size(m)
}
func (m *FlowMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FlowMessage proto.InternalMessageInfo

func (m *FlowMessage) GetType() FlowMessage_FlowType {
	if m != nil {
		return m.Type
	}
	return FlowMessage_FLOWUNKNOWN
}

func (m *FlowMessage) GetTimeReceived() uint64 {
	if m != nil {
		return m.TimeReceived
	}
	return 0
}

func (m *FlowMessage) GetSamplerAddress() []byte {
	if m != nil {
		return m.SamplerAddress
	}
	return nil
}

func (m *FlowMessage) GetSamplingRate() uint32 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

func (m *FlowMessage) GetSequenceNum() uint32 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *FlowMessage) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FlowMessage) GetSystemUptime() uint32 {
	if m != nil {
		return m.SystemUptime
	}
	return 0
}

func (m *FlowMessage) GetUnixSeconds() uint32 {
	if m != nil {
		return m.UnixSeconds
	}
	return 0
}

func (m *FlowMessage) GetSourceId() uint32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *FlowMessage) GetFlowDirection() uint32 {
	if m != nil {
		return m.FlowDirection
	}
	return 0
}

func (m *FlowMessage) GetTimeFlowStart() uint64 {
	if m != nil {
		return m.TimeFlowStart
	}
	return 0
}

func (m *FlowMessage) GetTimeFlowEnd() uint64 {
	if m != nil {
		return m.TimeFlowEnd
	}
	return 0
}

func (m *FlowMessage) GetBytesIn() uint64 {
	if m != nil {
		return m.BytesIn
	}
	return 0
}

func (m *FlowMessage) GetPacketsIn() uint64 {
	if m != nil {
		return m.PacketsIn
	}
	return 0
}

func (m *FlowMessage) GetBytesOut() uint64 {
	if m != nil {
		return m.BytesOut
	}
	return 0
}

func (m *FlowMessage) GetPacketsOut() uint64 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *FlowMessage) GetEtype() uint32 {
	if m != nil {
		return m.Etype
	}
	return 0
}

func (m *FlowMessage) GetProto() uint32 {
	if m != nil {
		return m.Proto
	}
	return 0
}

func (m *FlowMessage) GetSrcAddr() []byte {
	if m != nil {
		return m.SrcAddr
	}
	return nil
}

func (m *FlowMessage) GetDstAddr() []byte {
	if m != nil {
		return m.DstAddr
	}
	return nil
}

func (m *FlowMessage) GetNextHop() []byte {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *FlowMessage) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *FlowMessage) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *FlowMessage) GetInIf() uint32 {
	if m != nil {
		return m.InIf
	}
	return 0
}

func (m *FlowMessage) GetOutIf() uint32 {
	if m != nil {
		return m.OutIf
	}
	return 0
}

func (m *FlowMessage) GetSrcMacIn() uint64 {
	if m != nil {
		return m.SrcMacIn
	}
	return 0
}

func (m *FlowMessage) GetDstMacIn() uint64 {
	if m != nil {
		return m.DstMacIn
	}
	return 0
}

func (m *FlowMessage) GetSrcMacOut() uint64 {
	if m != nil {
		return m.SrcMacOut
	}
	return 0
}

func (m *FlowMessage) GetDstMacOut() uint64 {
	if m != nil {
		return m.DstMacOut
	}
	return 0
}

func (m *FlowMessage) GetSrcVlan() uint32 {
	if m != nil {
		return m.SrcVlan
	}
	return 0
}

func (m *FlowMessage) GetDstVlan() uint32 {
	if m != nil {
		return m.DstVlan
	}
	return 0
}

func (m *FlowMessage) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *FlowMessage) GetSrcTos() uint32 {
	if m != nil {
		return m.SrcTos
	}
	return 0
}

func (m *FlowMessage) GetDstTos() uint32 {
	if m != nil {
		return m.DstTos
	}
	return 0
}

func (m *FlowMessage) GetForwardingStatus() uint32 {
	if m != nil {
		return m.ForwardingStatus
	}
	return 0
}

func (m *FlowMessage) GetMinTTL() uint32 {
	if m != nil {
		return m.MinTTL
	}
	return 0
}

func (m *FlowMessage) GetMaxTTL() uint32 {
	if m != nil {
		return m.MaxTTL
	}
	return 0
}

func (m *FlowMessage) GetTCPFlags() uint32 {
	if m != nil {
		return m.TCPFlags
	}
	return 0
}

func (m *FlowMessage) GetIcmpType() uint32 {
	if m != nil {
		return m.IcmpType
	}
	return 0
}

func (m *FlowMessage) GetIcmpCode() uint32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *FlowMessage) GetIPv6FlowLabel() uint32 {
	if m != nil {
		return m.IPv6FlowLabel
	}
	return 0
}

func (m *FlowMessage) GetIPv6OptionHeaders() uint32 {
	if m != nil {
		return m.IPv6OptionHeaders
	}
	return 0
}

func (m *FlowMessage) GetFragmentId() uint32 {
	if m != nil {
		return m.FragmentId
	}
	return 0
}

func (m *FlowMessage) GetFragmentOffset() uint32 {
	if m != nil {
		return m.FragmentOffset
	}
	return 0
}

func (m *FlowMessage) GetBiFlowDirection() uint32 {
	if m != nil {
		return m.BiFlowDirection
	}
	return 0
}

func (m *FlowMessage) GetSrcAS() uint32 {
	if m != nil {
		return m.SrcAS
	}
	return 0
}

func (m *FlowMessage) GetDstAS() uint32 {
	if m != nil {
		return m.DstAS
	}
	return 0
}

func (m *FlowMessage) GetBgpNextHop() []byte {
	if m != nil {
		return m.BgpNextHop
	}
	return nil
}

func (m *FlowMessage) GetSrcNet() uint32 {
	if m != nil {
		return m.SrcNet
	}
	return 0
}

func (m *FlowMessage) GetDstNet() uint32 {
	if m != nil {
		return m.DstNet
	}
	return 0
}

func (m *FlowMessage) GetSrcPrefix() []byte {
	if m != nil {
		return m.SrcPrefix
	}
	return nil
}

func (m *FlowMessage) GetDstPrefix() []byte {
	if m != nil {
		return m.DstPrefix
	}
	return nil
}

func (m *FlowMessage) GetHasMPLS() bool {
	if m != nil {
		return m.HasMPLS
	}
	return false
}

func (m *FlowMessage) GetMPLSCount() uint32 {
	if m != nil {
		return m.MPLSCount
	}
	return 0
}

func (m *FlowMessage) GetMPLSPalRd() uint64 {
	if m != nil {
		return m.MPLSPalRd
	}
	return 0
}

func (m *FlowMessage) GetMPLSPrefixLen() uint32 {
	if m != nil {
		return m.MPLSPrefixLen
	}
	return 0
}

func (m *FlowMessage) GetMPLSTopLabelType() uint32 {
	if m != nil {
		return m.MPLSTopLabelType
	}
	return 0
}

func (m *FlowMessage) GetMPLSTopLabelIP() []byte {
	if m != nil {
		return m.MPLSTopLabelIP
	}
	return nil
}

func (m *FlowMessage) GetMPLS1TTL() uint32 {
	if m != nil {
		return m.MPLS1TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS1Label() uint32 {
	if m != nil {
		return m.MPLS1Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS2TTL() uint32 {
	if m != nil {
		return m.MPLS2TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS2Label() uint32 {
	if m != nil {
		return m.MPLS2Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS3TTL() uint32 {
	if m != nil {
		return m.MPLS3TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS3Label() uint32 {
	if m != nil {
		return m.MPLS3Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS4TTL() uint32 {
	if m != nil {
		return m.MPLS4TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS4Label() uint32 {
	if m != nil {
		return m.MPLS4Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS5TTL() uint32 {
	if m != nil {
		return m.MPLS5TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS5Label() uint32 {
	if m != nil {
		return m.MPLS5Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS6TTL() uint32 {
	if m != nil {
		return m.MPLS6TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS6Label() uint32 {
	if m != nil {
		return m.MPLS6Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS7TTL() uint32 {
	if m != nil {
		return m.MPLS7TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS7Label() uint32 {
	if m != nil {
		return m.MPLS7Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS8TTL() uint32 {
	if m != nil {
		return m.MPLS8TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS8Label() uint32 {
	if m != nil {
		return m.MPLS8Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS9TTL() uint32 {
	if m != nil {
		return m.MPLS9TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS9Label() uint32 {
	if m != nil {
		return m.MPLS9Label
	}
	return 0
}

func (m *FlowMessage) GetMPLS10TTL() uint32 {
	if m != nil {
		return m.MPLS10TTL
	}
	return 0
}

func (m *FlowMessage) GetMPLS10Label() uint32 {
	if m != nil {
		return m.MPLS10Label
	}
	return 0
}

func (m *FlowMessage) GetEngineType() uint32 {
	if m != nil {
		return m.EngineType
	}
	return 0
}

func (m *FlowMessage) GetEngineId() uint32 {
	if m != nil {
		return m.EngineId
	}
	return 0
}

func (m *FlowMessage) GetCustomInteger1() uint64 {
	if m != nil {
		return m.CustomInteger1
	}
	return 0
}

func (m *FlowMessage) GetCustomInteger2() uint64 {
	if m != nil {
		return m.CustomInteger2
	}
	return 0
}

func (m *FlowMessage) GetCustomInteger3() uint64 {
	if m != nil {
		return m.CustomInteger3
	}
	return 0
}

func (m *FlowMessage) GetCustomInteger4() uint64 {
	if m != nil {
		return m.CustomInteger4
	}
	return 0
}

func (m *FlowMessage) GetCustomInteger5() uint64 {
	if m != nil {
		return m.CustomInteger5
	}
	return 0
}

func (m *FlowMessage) GetCustomBytes1() []byte {
	if m != nil {
		return m.CustomBytes1
	}
	return nil
}

func (m *FlowMessage) GetCustomBytes2() []byte {
	if m != nil {
		return m.CustomBytes2
	}
	return nil
}

func (m *FlowMessage) GetCustomBytes3() []byte {
	if m != nil {
		return m.CustomBytes3
	}
	return nil
}

func (m *FlowMessage) GetCustomBytes4() []byte {
	if m != nil {
		return m.CustomBytes4
	}
	return nil
}

func (m *FlowMessage) GetCustomBytes5() []byte {
	if m != nil {
		return m.CustomBytes5
	}
	return nil
}

func init() {
	proto.RegisterEnum("flowpb.FlowMessage_FlowType", FlowMessage_FlowType_name, FlowMessage_FlowType_value)
	proto.RegisterType((*FlowMessage)(nil), "flowpb.FlowMessage")
}

func init() { proto.RegisterFile("flow.proto", fileDescriptor_bb3fc33c49933823) }

var fileDescriptor_bb3fc33c49933823 = []byte{
	// 1207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x96, 0xd9, 0x77, 0xdb, 0x54,
	0x17, 0xc5, 0x3f, 0xb7, 0x69, 0x92, 0xde, 0xa4, 0xa9, 0xab, 0xaf, 0x84, 0x43, 0x09, 0xc5, 0xa4,
	0xa5, 0x35, 0xa5, 0x99, 0x3c, 0x25, 0xa6, 0x4c, 0xcd, 0x60, 0x22, 0xea, 0xd8, 0x5e, 0x96, 0xd3,
	0xb2, 0x78, 0x61, 0x29, 0xd2, 0xb5, 0xd1, 0xc2, 0x96, 0x84, 0x74, 0x9d, 0x81, 0xbf, 0x97, 0x17,
	0xa6, 0x27, 0xa6, 0x57, 0xd6, 0x39, 0x47, 0xb2, 0x24, 0x3b, 0x4f, 0xf1, 0xfe, 0xed, 0xbd, 0xaf,
	0xa5, 0x7b, 0x8f, 0x1c, 0x09, 0xd1, 0x1f, 0x7a, 0x17, 0x9b, 0x7e, 0xe0, 0x29, 0x4f, 0x9b, 0xc7,
	0xcf, 0xfe, 0xd9, 0xfa, 0xcf, 0xab, 0x62, 0xa9, 0x31, 0xf4, 0x2e, 0x4e, 0x64, 0x18, 0x9a, 0x03,
	0xa9, 0x6d, 0x8b, 0xb9, 0xde, 0x95, 0x2f, 0x21, 0x57, 0xc8, 0x15, 0x57, 0x4a, 0x6b, 0x9b, 0x1c,
	0xdb, 0x4c, 0x45, 0xe8, 0x33, 0x66, 0xba, 0x94, 0xd4, 0xd6, 0xc5, 0x72, 0xcf, 0x19, 0xc9, 0xae,
	0xb4, 0xa4, 0x73, 0x2e, 0x6d, 0xb8, 0x51, 0xc8, 0x15, 0xe7, 0xba, 0x19, 0xa6, 0x3d, 0x11, 0x2b,
	0x86, 0x39, 0xf2, 0x87, 0x32, 0x78, 0x69, 0xdb, 0x81, 0x0c, 0x43, 0xb8, 0x59, 0xc8, 0x15, 0x97,
	0xbb, 0x53, 0x14, 0xd7, 0x22, 0xe2, 0xb8, 0x83, 0xae, 0xa9, 0x24, 0xcc, 0x15, 0x72, 0xc5, 0x3b,
	0xdd, 0x0c, 0xd3, 0x0a, 0x62, 0xc9, 0x90, 0x3f, 0x8e, 0xa5, 0x6b, 0xc9, 0xd6, 0x78, 0x04, 0xb7,
	0x28, 0x92, 0x46, 0xda, 0x7d, 0x71, 0xeb, 0xc0, 0x1b, 0xbb, 0x0a, 0xe6, 0xc9, 0x63, 0x41, 0x6b,
	0x5f, 0x85, 0x4a, 0x8e, 0x4e, 0x7d, 0xe5, 0x8c, 0x24, 0x2c, 0x44, 0x6b, 0xa7, 0x18, 0xae, 0x7d,
	0xea, 0x3a, 0x97, 0x86, 0xb4, 0x3c, 0xd7, 0x0e, 0x61, 0x91, 0xd7, 0x4e, 0x21, 0xed, 0x81, 0x58,
	0x34, 0xbc, 0x71, 0x60, 0x49, 0xdd, 0x86, 0xdb, 0x64, 0x4f, 0xb4, 0xf6, 0x58, 0xdc, 0xc1, 0xbd,
	0x39, 0x74, 0x02, 0x69, 0x29, 0xc7, 0x73, 0x41, 0x50, 0x20, 0x0b, 0x31, 0x85, 0x7b, 0x83, 0xd0,
	0x50, 0x66, 0xa0, 0x60, 0x89, 0x36, 0x2c, 0x0b, 0xf1, 0x4a, 0x62, 0x70, 0xe4, 0xda, 0xb0, 0x4c,
	0x99, 0x34, 0xd2, 0x40, 0x2c, 0xec, 0x5f, 0x29, 0x19, 0xea, 0x2e, 0xdc, 0x21, 0x37, 0x96, 0xda,
	0x9a, 0xb8, 0xdd, 0x31, 0xad, 0x1f, 0xa4, 0x42, 0x6f, 0x85, 0xbc, 0x04, 0xe0, 0x1d, 0x50, 0xb0,
	0x3d, 0x56, 0x70, 0x97, 0xcc, 0x89, 0xd6, 0x1e, 0x0a, 0x11, 0x05, 0xd1, 0xcd, 0x93, 0x9b, 0x22,
	0xb8, 0xb3, 0x47, 0x0a, 0xc7, 0xe3, 0x1e, 0xef, 0x2c, 0x09, 0xa4, 0x1d, 0x1c, 0x2a, 0xd0, 0x98,
	0x92, 0xc0, 0xeb, 0x33, 0x02, 0x0b, 0x4f, 0x16, 0xfe, 0x4f, 0x87, 0x1d, 0x4b, 0x74, 0x0e, 0x43,
	0x45, 0xce, 0x7d, 0x76, 0x22, 0x89, 0x4e, 0x4b, 0x5e, 0xaa, 0x63, 0xcf, 0x87, 0xb7, 0xd8, 0x89,
	0x64, 0xb4, 0x5a, 0xc7, 0x0b, 0x14, 0xac, 0xd2, 0xb7, 0xc4, 0x32, 0x5a, 0x8d, 0x9c, 0xb7, 0xd9,
	0x89, 0xa4, 0xa6, 0x89, 0x39, 0xdd, 0xd5, 0xfb, 0x00, 0x84, 0xe9, 0x33, 0x5e, 0x6b, 0x7b, 0xac,
	0xf4, 0x3e, 0xbc, 0xc3, 0xd7, 0x4a, 0x82, 0x4e, 0x35, 0xb0, 0x4e, 0x4c, 0x4b, 0x77, 0xe1, 0x01,
	0xef, 0x49, 0xac, 0xd1, 0x3b, 0x0c, 0x15, 0x7b, 0xef, 0xb2, 0x17, 0x6b, 0xdc, 0x69, 0xce, 0xe1,
	0x76, 0xad, 0xf1, 0x4e, 0x4f, 0x00, 0xba, 0x9c, 0x44, 0xf7, 0x3d, 0x76, 0x27, 0x20, 0xba, 0xa3,
	0xd7, 0x43, 0xd3, 0x85, 0x87, 0x93, 0x3b, 0x42, 0x19, 0xdd, 0x11, 0x39, 0xef, 0x4f, 0xee, 0x88,
	0x9c, 0x55, 0x31, 0x8f, 0x7f, 0x75, 0x1b, 0x0a, 0x64, 0x44, 0x0a, 0xb9, 0x11, 0x58, 0x3d, 0x2f,
	0x84, 0x0f, 0x98, 0xb3, 0x42, 0x7e, 0x18, 0x2a, 0xe4, 0xeb, 0xcc, 0x59, 0x69, 0xcf, 0x44, 0xbe,
	0xe1, 0x05, 0x17, 0x66, 0x60, 0x3b, 0xee, 0xc0, 0x50, 0xa6, 0x1a, 0x87, 0xf0, 0x88, 0x12, 0x33,
	0x1c, 0xd7, 0x38, 0x71, 0xdc, 0x5e, 0xaf, 0x09, 0x8f, 0x79, 0x0d, 0x56, 0xc4, 0xcd, 0x4b, 0xe4,
	0x1f, 0x46, 0x9c, 0x14, 0xee, 0x57, 0xef, 0xa0, 0xd3, 0x18, 0x9a, 0x83, 0x10, 0x9e, 0xf0, 0x13,
	0x12, 0x6b, 0xf4, 0x74, 0x6b, 0xe4, 0xd3, 0x2f, 0xcc, 0x53, 0xf6, 0x62, 0x1d, 0x7b, 0x07, 0x9e,
	0x2d, 0xa1, 0x98, 0x78, 0xa8, 0xf1, 0x99, 0xd1, 0x3b, 0xe7, 0x35, 0x1c, 0xfd, 0xa6, 0x79, 0x26,
	0x87, 0xf0, 0x11, 0x3f, 0x59, 0x19, 0xa8, 0x3d, 0x17, 0xf7, 0x10, 0xb4, 0x7d, 0x7c, 0xce, 0x8e,
	0xa5, 0x69, 0xcb, 0x20, 0x84, 0x67, 0x94, 0x9c, 0x35, 0x70, 0xd6, 0x1b, 0x81, 0x39, 0x18, 0x49,
	0x57, 0xe9, 0x36, 0x7c, 0x4c, 0xb1, 0x14, 0xc1, 0xdf, 0xac, 0x58, 0xb5, 0xfb, 0xfd, 0x50, 0x2a,
	0x78, 0x4e, 0x99, 0x29, 0xaa, 0x15, 0xc5, 0xdd, 0x7d, 0x27, 0xfb, 0xdc, 0x6f, 0x50, 0x70, 0x1a,
	0xe3, 0xec, 0xe1, 0x23, 0x60, 0xc0, 0x26, 0xcf, 0x1e, 0x09, 0xa4, 0x38, 0xfe, 0x06, 0x6c, 0x31,
	0x25, 0x81, 0x57, 0xb7, 0x3f, 0xf0, 0xe3, 0x87, 0x61, 0x9b, 0x1e, 0x86, 0x14, 0x89, 0x4e, 0xbc,
	0x25, 0x15, 0xec, 0x4c, 0x4e, 0xbc, 0x25, 0x55, 0x74, 0xe2, 0xc8, 0x4b, 0x93, 0x13, 0x47, 0xce,
	0x93, 0xda, 0x09, 0x64, 0xdf, 0xb9, 0x84, 0x32, 0x2d, 0x97, 0x80, 0x68, 0x52, 0x23, 0xb7, 0xc2,
	0xee, 0x04, 0xe0, 0x3c, 0x1e, 0x9b, 0xe1, 0x49, 0xa7, 0x69, 0x40, 0xb5, 0x90, 0x2b, 0x2e, 0x76,
	0x63, 0x89, 0x3d, 0xfc, 0xcb, 0xbf, 0xb6, 0x35, 0xfa, 0xc2, 0x04, 0xc4, 0x6e, 0xc7, 0x1c, 0x76,
	0x6d, 0xd8, 0xe5, 0xf9, 0x9f, 0x00, 0x3c, 0x53, 0x12, 0xf4, 0x1d, 0x4d, 0xe9, 0xc2, 0x1e, 0x9f,
	0x69, 0x06, 0xe2, 0xa4, 0x22, 0xe8, 0x79, 0x3e, 0x9d, 0x31, 0x4d, 0x4e, 0x9d, 0x27, 0x75, 0x9a,
	0xe3, 0x89, 0xa5, 0x99, 0xde, 0x81, 0x4f, 0xf8, 0xbf, 0x4c, 0x96, 0xe2, 0xa4, 0x21, 0xd9, 0xc1,
	0xd9, 0x7d, 0xc1, 0x93, 0x16, 0x6b, 0xdc, 0x77, 0xfa, 0xcc, 0x63, 0xf6, 0x29, 0x4f, 0x45, 0x42,
	0xe2, 0x6e, 0x09, 0xbb, 0x9f, 0x25, 0xdd, 0x52, 0xaa, 0x5b, 0xe2, 0xee, 0xe7, 0x49, 0xb7, 0x94,
	0xe9, 0x96, 0xb1, 0xfb, 0x45, 0xd2, 0x2d, 0xa7, 0xba, 0x65, 0xee, 0x7e, 0x99, 0x74, 0xcb, 0x99,
	0x6e, 0x05, 0xbb, 0x2f, 0x93, 0x6e, 0x25, 0xd5, 0xad, 0x70, 0x77, 0x3f, 0xe9, 0x56, 0x32, 0xdd,
	0x2a, 0x76, 0x0f, 0x92, 0x6e, 0x35, 0xd5, 0xad, 0x72, 0xf7, 0x30, 0xe9, 0x56, 0x33, 0xdd, 0x1a,
	0x76, 0x8f, 0x92, 0x6e, 0x2d, 0xd5, 0xad, 0x71, 0xb7, 0x91, 0x74, 0x6b, 0x99, 0xee, 0x2e, 0x76,
	0xbf, 0x4a, 0xba, 0xbb, 0xa9, 0xee, 0x2e, 0x77, 0x8f, 0x93, 0xee, 0x6e, 0xa6, 0xbb, 0x87, 0x5d,
	0x3d, 0xe9, 0xee, 0xa5, 0xba, 0x7b, 0xdc, 0xfd, 0x3a, 0xe9, 0xee, 0x65, 0xba, 0x75, 0xec, 0xbe,
	0x4a, 0xba, 0xf5, 0x54, 0xb7, 0xce, 0xdd, 0x66, 0xd2, 0x65, 0x12, 0xcf, 0xec, 0xce, 0x36, 0x96,
	0x4f, 0x92, 0x89, 0x26, 0x80, 0xff, 0x95, 0x59, 0x70, 0xbd, 0xc5, 0xef, 0x07, 0x29, 0x84, 0xeb,
	0x1f, 0xb9, 0x03, 0xc7, 0x95, 0x34, 0xa9, 0x6d, 0x5e, 0x3f, 0x21, 0x78, 0x6d, 0xac, 0x74, 0x1b,
	0x3a, 0x7c, 0x6d, 0xb1, 0xd6, 0x9e, 0x8a, 0x95, 0x83, 0x71, 0xa8, 0xbc, 0x91, 0xee, 0x2a, 0x39,
	0x90, 0xc1, 0x0e, 0xfc, 0xb2, 0x40, 0x4f, 0xcd, 0x14, 0x9e, 0x09, 0x96, 0xe0, 0xd7, 0xeb, 0x82,
	0xa5, 0x99, 0x60, 0x19, 0x7e, 0xbb, 0x2e, 0x58, 0x9e, 0x09, 0x56, 0xe0, 0xf7, 0xeb, 0x82, 0x95,
	0x99, 0x60, 0x15, 0xfe, 0xb8, 0x2e, 0x58, 0xd5, 0x1e, 0x89, 0x65, 0x26, 0xf4, 0x72, 0xb1, 0x03,
	0x7f, 0x2e, 0xd0, 0xb3, 0x98, 0x81, 0x53, 0xa1, 0x12, 0xfc, 0x35, 0x1b, 0x2a, 0x4d, 0x85, 0xca,
	0xf0, 0xf7, 0x6c, 0xa8, 0x3c, 0x15, 0xaa, 0xc0, 0x3f, 0xb3, 0xa1, 0xca, 0x54, 0xa8, 0x0a, 0xff,
	0xce, 0x86, 0xaa, 0xeb, 0x86, 0x58, 0x8c, 0xdf, 0x70, 0xb5, 0xbb, 0x62, 0xa9, 0xd1, 0x6c, 0xbf,
	0x39, 0x6d, 0xbd, 0x6a, 0xb5, 0xdf, 0xb4, 0xf2, 0xff, 0xd3, 0x96, 0xc4, 0x82, 0x81, 0xe4, 0xbb,
	0x6a, 0x3e, 0xa7, 0xad, 0x08, 0xd1, 0x3a, 0xea, 0x91, 0x7c, 0x5d, 0xcd, 0xdf, 0xc8, 0xe8, 0x7a,
	0xfe, 0xa6, 0x76, 0x5b, 0xdc, 0xd2, 0x3b, 0x0d, 0xfd, 0x9b, 0xfc, 0xdc, 0xfe, 0xd6, 0xb7, 0x1b,
	0x03, 0x47, 0x7d, 0x3f, 0x3e, 0xdb, 0xb4, 0xbc, 0xd1, 0x96, 0x15, 0x38, 0xa1, 0x72, 0x5c, 0xd3,
	0x1f, 0xfd, 0xb4, 0x35, 0xf0, 0xf0, 0x15, 0xbb, 0xb4, 0xe1, 0xf6, 0xcf, 0xeb, 0x5b, 0xfe, 0xd9,
	0x0b, 0x7e, 0xe1, 0x3e, 0x9b, 0xa7, 0xd7, 0xf4, 0xf2, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe8,
	0xf8, 0x5c, 0xd8, 0xb4, 0x0b, 0x00, 0x00,
}
