# generated by datamodel-codegen:
#   filename:  Subscription.json
#   timestamp: 2021-01-20T16:24:30+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union, Literal

from pydantic import AnyUrl, BaseModel, Field, confloat, constr


class Status(Enum):
    ok = 'ok'
    failed = 'failed'


class Accept(Enum):
    application_json = 'application/json'
    application_ld_json = 'application/ld+json'


class Endpoint(BaseModel):
    uri: AnyUrl
    accept: Optional[Accept] = None


class GeorelItem(BaseModel):
    pass


class Georel(BaseModel):
    __root__: Union[GeorelItem, GeorelItem]


class Coordinates(BaseModel):
    __root__: Any


class Geometry(Enum):
    Point = 'Point'
    MultiPoint = 'MultiPoint'
    LineString = 'LineString'
    MultiLineString = 'MultiLineString'
    Polygon = 'Polygon'
    MultiPolygon = 'MultiPolygon'


class LdContextItem(BaseModel):
    pass


class LdContext(BaseModel):
    __root__: Union[Dict[str, Any], LdContextItem, LdContextItem]


class Name(BaseModel):
    __root__: constr(
        regex='^((\d|[a-zA-Z]|_)+(:(\d|[a-zA-Z]|_)+)?(#\d+)?)$', min_length=1
    )


class Status1(Enum):
    active = 'active'
    paused = 'paused'
    expired = 'expired'


class CreatedAt(BaseModel):
    __root__: datetime


class ModifiedAt(BaseModel):
    __root__: datetime


class EntityInfo(BaseModel):
    id: Optional[str] = None
    type: Name
    idPattern: Optional[str] = None


class NotificationParams(BaseModel):
    attributes: Optional[List[constr(min_length=1)]] = None
    format: Optional[str] = None
    endpoint: Endpoint
    status: Optional[Status] = None
    timesSent: Optional[confloat(ge=1.0)] = None
    lastNotification: Optional[datetime] = None
    lastFailure: Optional[datetime] = None
    lastSuccess: Optional[datetime] = None


class GeoQuery(BaseModel):
    georel: Georel
    coordinates: Coordinates
    geometry: Geometry


class SubscriptionFragment(BaseModel):
    _context: Optional[LdContext] = Field(None, alias='@context')
    entities: Optional[List[EntityInfo]] = None
    name: Optional[constr(min_length=1)] = None
    description: Optional[constr(min_length=1)] = None
    watchedAttributes: Optional[List[Name]] = None
    timeInterval: Optional[confloat(ge=0.0)] = None
    expires: Optional[datetime] = None
    isActive: Optional[bool] = None
    throttling: Optional[confloat(ge=1.0)] = None
    q: Optional[str] = None
    geoQ: Optional[GeoQuery] = None
    csf: Optional[str] = None


class Subscription(SubscriptionFragment):
    id: str
    type: Literal["Subscription"] = "Subscription"
    notification: NotificationParams
    status: Optional[Status1] = None
    createdAt: Optional[CreatedAt] = None
    modifiedAt: Optional[ModifiedAt] = None

Subscription.update_forward_refs()
